/*
  Copyright (c) 2007-2010 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2007-2010 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

static int GT_APPENDINT(fillspecialtable)(GtEncseq *encseq,
                                          GtSequenceBuffer *fb,
                                          GtError *err)
{
  unsigned long currentspecialchar = 0, pos;
  int retval;
  unsigned int lastspeciallength = 0;
  GtTwobitencoding bitwise = 0;
  GtUchar cc;
  GT_APPENDINT(GtSpecialtable) *specialtable
    = &(GT_APPENDINT(encseq->specialtable.st));
#ifndef NDEBUG
  unsigned long sumspecials = 0, countspecials = 0;
#endif
#ifndef NOENDPTR
  unsigned long *endptrUint, endspecialcells, nextcheck;
#endif
  DECLARESEQBUFFER(encseq->twobitencoding);

  specialtable->positions
    = gt_malloc(sizeof (*specialtable->positions) *
                specialtable->numofspecialstostore);
  specialtable->rangelengths
    = gt_malloc(sizeof(*specialtable->positions) *
                specialtable->numofspecialstostore);
#ifndef NOENDPTR
  endspecialcells
    = (unsigned long) (encseq->totallength/GT_MAXSPECIALTABLETYPE + 1);
  specialtable->endsubsUint = gt_malloc(sizeof(unsigned long) *
                                        endspecialcells);
  nextcheck = (unsigned long) GT_MAXSPECIALTABLETYPE;
  endptrUint = specialtable->endsubsUint;
#endif

  for (pos=0; /* Nothing */; pos++)
  {
    retval = gt_sequence_buffer_next(fb,&cc,err);
    if (retval < 0)
    {
      return -1;
    }
    if (retval == 0)
    {
      if (lastspeciallength > 0)
      {
        /* note that we store one less than the length to prevent overflows */
        gt_assert(currentspecialchar > 0);
        gt_assert(currentspecialchar - 1 < specialtable->numofspecialstostore);
        specialtable->rangelengths[currentspecialchar-1]
          = (GT_SPECIALTABLETYPE) (lastspeciallength-1);
#ifndef NDEBUG
        sumspecials += (unsigned long) lastspeciallength;
#endif
      }
      break;
    }
    if (ISSPECIAL(cc))
    {
#ifndef NDEBUG
      countspecials++;
#endif
      if (lastspeciallength == 0) /* at beginning of special range */
      {
        specialtable->positions[currentspecialchar++]
#ifndef NOENDPTR
          = (GT_SPECIALTABLETYPE) (pos & GT_MAXSPECIALTABLETYPE);
#else
          = pos;
#endif
        lastspeciallength = 1U;
      } else /* extend special range */
      {
        if (lastspeciallength == (unsigned int) GT_MAXSPECIALTABLETYPE)
            /* already at maximal length */
        {
          gt_assert(currentspecialchar > 0);
          specialtable->rangelengths[currentspecialchar-1]
            = (GT_SPECIALTABLETYPE) GT_MAXSPECIALTABLETYPE;
#ifndef NDEBUG
          sumspecials += (1 + (unsigned long) GT_MAXSPECIALTABLETYPE);
#endif
          lastspeciallength = 0;
        } else
        {
          lastspeciallength++;
        }
      }
    } else
    {
      if (lastspeciallength > 0)
      {
        specialtable->rangelengths[currentspecialchar-1]
          = (GT_SPECIALTABLETYPE) (lastspeciallength-1);
#ifndef NDEBUG
        sumspecials += (unsigned long) lastspeciallength;
#endif
        lastspeciallength = 0;
      }
    }
#ifndef NOENDPTR
    if (pos == nextcheck)
    {
      *endptrUint++ = currentspecialchar;
      nextcheck += (unsigned long) (GT_MAXSPECIALTABLETYPE+1);
    }
#endif
    UPDATESEQBUFFER(cc);
  }
  gt_assert(sumspecials == countspecials);
  UPDATESEQBUFFERFINAL;
#ifndef NOENDPTR
  while (endptrUint < specialtable->endsubsUint + endspecialcells)
  {
    *endptrUint++ = currentspecialchar;
  }
#endif
  return 0;
}

#ifdef GT_RANGEDEBUG

static void GT_APPENDINT(showspecialpositionswithpages)
                            (const GT_APPENDINT(GtSpecialtable) *specialtable,
                             unsigned long pgnum,
                             unsigned long offset,
                             unsigned long first,
                             unsigned long last)
{
  unsigned long idx;
  unsigned long startpos;
  GtRange range;

  printf("page %lu: %lu elems at offset %lu\n",
          pgnum, last - first + 1, offset);
  for (idx=first; idx<=last; idx++)
  {
    startpos = (unsigned long) specialtable->positions[idx];
    range.start = offset + startpos;
    range.end = range.start + specialtable->rangelengths[idx] + 1;
    printf("%lu: ",idx);
    showsequencerange(&range);
    printf("\n");
  }
}

static void GT_APPENDINT(showallspecialpositionswithpages)(
                            const GT_APPENDINT(GtSpecialtable) *specialtable)
{
  unsigned long endpos0, endpos1, pgnum, offset = 0;

  for (pgnum=0; pgnum < specialtable->numofspecialcells; pgnum++)
  {
    if (pgnum == 0)
    {
      endpos0 = 0;
    } else
    {
      endpos0 = specialtable->endsubsUint[pgnum-1];
    }
    endpos1 = specialtable->endsubsUint[pgnum];
    if (endpos0 < endpos1)
    {
      GT_APPENDINT(showspecialpositionswithpages)(specialtable,pgnum,offset,
                                                  endpos0,endpos1-1);
    }
    offset += 1UL + (unsigned long) specialtable->maxspecialtype;
  }
}
#endif

/*@null@*/ static const GT_SPECIALTABLETYPE
                *GT_APPENDINT(binarysearchpreviousequal)(
                                           const GT_SPECIALTABLETYPE *leftptr,
                                           const GT_SPECIALTABLETYPE *rightptr,
                                           GT_SPECIALTABLETYPE pos)
{
  const GT_SPECIALTABLETYPE *midptr,
                    *found = NULL;

  while (leftptr <= rightptr)
  {
    midptr = leftptr + GT_DIV2((unsigned long) (rightptr-leftptr));
    if (pos < *midptr)
    {
      rightptr = midptr - 1;
    } else
    {
      if (pos > *midptr)
      {
        found = midptr;
        leftptr = midptr + 1;
      } else
      {
        found = midptr;
        break;
      }
    }
  }
  return found;
}

static void GT_APPENDINT(determinerange)(GtRange *range,
                                         const GT_APPENDINT(GtSpecialtable)
                                           *specialtable,
                                         unsigned long transpagenum,
                                         unsigned long cellnum)
{
  range->start = transpagenum *
                 (1UL + (unsigned long) specialtable->maxspecialtype) +
                 specialtable->positions[cellnum];
  range->end = range->start +
               specialtable->rangelengths[cellnum] + 1;
}

static void GT_APPENDINT(binpreparenextrangeGtEncseqReader)(GtEncseqReader *esr)
{
  unsigned long endpos0, endpos1, cellnum, pagenum;
  bool found = false;
  GtRange range;
  bool moveforward = GT_ISDIRREVERSE(esr->readmode) ? false : true;
  GT_APPENDINT(GtSpecialtable) *specialtable
    = &(GT_APPENDINT(esr->encseq->specialtable.st));

  pagenum = GT_POS2PAGENUM(esr->currentpos);
  if (pagenum > 0)
  {
    endpos0 = specialtable->endsubsUint[pagenum-1];
  } else
  {
    endpos0 = 0;
  }
  esr->idx->firstcell = endpos0;
  esr->idx->lastcell = endpos1
                     = specialtable->endsubsUint[pagenum];
  if (esr->currentpos > 0)
  {
    while (endpos0  < endpos1)
    {
      cellnum = endpos0 + GT_DIV2(endpos1 - endpos0 - 1);
      GT_APPENDINT(determinerange)(&range,specialtable,pagenum,cellnum);
#ifdef RANGEDEBUG
      printf("binsearch in [%lu,%lu] => mid = %lu => ",endpos0,endpos1,cellnum);
      showsequencerange(&range);
      printf("\n");
#endif
      if (moveforward)
      {
        if (esr->currentpos > range.end)
        {
          found = true;
          esr->idx->firstcell = cellnum;
          endpos0 = cellnum+1;
        } else
        {
          if (esr->currentpos >= range.start)
          {
            found = true;
            esr->idx->firstcell = cellnum;
            break;
          }
          endpos1 = cellnum;
        }
      } else
      {
        if (esr->currentpos < range.start)
        {
          found = true;
          esr->idx->lastcell = cellnum+1;
          endpos1 = cellnum;
        } else
        {
          if (esr->currentpos < range.end)
          {
            found = true;
            esr->idx->lastcell = cellnum+1;
            break;
          }
          endpos0 = cellnum+1;
        }
      }
    }
  } else
  {
    if (endpos0  < endpos1)
    {
      GT_APPENDINT(determinerange)(&range,specialtable,pagenum,0);
      if (moveforward)
      {
        if (range.start == 0)
        {
          found = true;
          esr->idx->firstcell = 0;
        }
      } else
      {
        found = true;
        esr->idx->lastcell = 1UL;
      }
    }
  }
  if (moveforward && !found && pagenum > 0)
  {
    if (pagenum == 1UL)
    {
      endpos0 = 0;
    } else
    {
      endpos0 = specialtable->endsubsUint[pagenum-2];
    }
    endpos1 = specialtable->endsubsUint[pagenum-1];
    if (endpos0 < endpos1)
    {
      esr->idx->firstcell = endpos1-1;
      esr->idx->lastcell = endpos1;
      pagenum--;
      found = true;
    }
  }
#ifdef RANGEDEBUG
  if (found)
  {
    GT_APPENDINT(determinerange)(&range,specialtable,pagenum,
                                 moveforward ? esr->idx->firstcell
                                             : (esr->idx->lastcell-1));
    printf("binary found pos %lu in ", esr->currentpos);
    showsequencerange(&range);
    printf(" at cell %lu in page %lu\n",
           moveforward ? esr->idx->firstcell : (esr->idx->lastcell-1),
           pagenum);
  } else
  {
    printf("no nearby interval found for startpos %lu\n",esr->currentpos);
  }
#endif
  if (found)
  {
    GT_APPENDINT(determinerange)(&esr->idx->previousrange,specialtable,
                                 pagenum,
                                 moveforward ? esr->idx->firstcell
                                             : (esr->idx->lastcell-1));
#ifdef RANGEDEBUG
    printf("previousrange=");
    showsequencerange(&esr->idx->previousrange);
    printf("\n");
#endif
    if (esr->idx->previousrange.start <= esr->currentpos &&
        esr->currentpos < esr->idx->previousrange.end)
    {
      esr->idx->hasprevious = true;
    }
    if (moveforward)
    {
      if (pagenum+1 < specialtable->numofspecialcells)
      {
        esr->idx->morepagesleft = true;
        esr->idx->nextpage = pagenum+1;
      } else
      {
        esr->idx->morepagesleft = false;
        esr->idx->nextpage = pagenum;
      }
    } else
    {
      if (pagenum > 0)
      {
        esr->idx->morepagesleft = true;
        esr->idx->nextpage = pagenum-1;
      } else
      {
        esr->idx->morepagesleft = false;
        esr->idx->nextpage = 0;
      }
    }
  } else
  {
    esr->idx->firstcell = esr->idx->lastcell = 0;
    if (pagenum < specialtable->numofspecialcells)
    {
      esr->idx->morepagesleft = true;
    } else
    {
      esr->idx->morepagesleft = false;
    }
    esr->idx->nextpage = pagenum;
  }
}

/*
   find next not empty page and set firstcell to the first index in the
   page and lastcell to the last plus 1 index of the page.
*/

static bool GT_APPENDINT(nextnonemptypage)(GtEncseqReader *esr,
                                           bool moveforward)
{
  unsigned long endpos0, endpos1, pagenum;
  GT_APPENDINT(GtSpecialtable) *specialtable
    = &(GT_APPENDINT(esr->encseq->specialtable.st));

  while (esr->idx->morepagesleft)
  {
    pagenum = esr->idx->nextpage;
    if (moveforward)
    {
      if (esr->idx->nextpage == specialtable->numofspecialcells-1)
      {
        esr->idx->morepagesleft = false;
      } else
      {
        esr->idx->nextpage++;
      }
    } else
    {
      if (esr->idx->nextpage == 0)
      {
        esr->idx->morepagesleft = false;
      } else
      {
        esr->idx->nextpage--;
      }
    }
    if (pagenum == 0)
    {
      endpos0 = 0;
    } else
    {
      endpos0 = specialtable->endsubsUint[pagenum-1];
    }
    endpos1 = specialtable->endsubsUint[pagenum];
    if (endpos0 < endpos1)
    {
      esr->idx->firstcell = endpos0;
      esr->idx->lastcell = endpos1;
      return true;
    }
  }
  return false;
}

static void GT_APPENDINT(advancerangeGtEncseqReader)(GtEncseqReader *esr)
{
  unsigned long cellnum;
  bool moveforward = GT_ISDIRREVERSE(esr->readmode) ? false : true;
  GT_APPENDINT(GtSpecialtable) *specialtable
    = &(GT_APPENDINT(esr->encseq->specialtable.st));

  while (true)
  {
    if (esr->idx->hascurrent)
    {
      esr->idx->previousrange = esr->idx->currentrange;
      esr->idx->hascurrent = false;
    }
    if (moveforward)
    {
      esr->idx->firstcell++;
    } else
    {
      esr->idx->lastcell--;
    }
#ifdef RANGEDEBUG
    printf("advance with firstcell=%lu, lastcell=%lu\n",
            esr->idx->firstcell,esr->idx->lastcell);
#endif
    /* do not let comparison values become negative, hence compare with + 1 */
    if (esr->idx->firstcell + 1 < esr->idx->lastcell + 1 ||
        GT_APPENDINT(nextnonemptypage)(esr,moveforward))
    {
      if (moveforward)
      {
        cellnum = esr->idx->firstcell;
      } else
      {
        cellnum = esr->idx->lastcell - 1;
      }
      GT_APPENDINT(determinerange)(&esr->idx->currentrange,specialtable,
                                   esr->idx->morepagesleft
                                     ? (moveforward ? (esr->idx->nextpage-1)
                                                    : (esr->idx->nextpage+1))
                                     : esr->idx->nextpage,
                                   cellnum);
      esr->idx->hasrange = true;
    } else
    {
      esr->idx->hasrange = false;
      break;
    }
    if (esr->idx->hasprevious)
    {
      if (moveforward)
      {
        if (esr->idx->previousrange.end == esr->idx->currentrange.start)
        {
          esr->idx->previousrange.end = esr->idx->currentrange.end;
          esr->idx->hascurrent = false;
        } else
        {
          esr->idx->hascurrent = true;
          break;
        }
      } else
      {
        if (esr->idx->currentrange.end == esr->idx->previousrange.start)
        {
          esr->idx->previousrange.start = esr->idx->currentrange.start;
          esr->idx->hascurrent = false;
        } else
        {
          esr->idx->hascurrent = true;
          break;
        }
      }
    } else
    {
      esr->idx->previousrange = esr->idx->currentrange;
      esr->idx->hasprevious = true;
      esr->idx->hascurrent = false;
    }
  }
}

static GtUchar GT_APPENDINT(seqdelivercharSpecial)(GtEncseqReader *esr)
{
#ifdef RANGEDEBUG
  printf("pos=%lu,previous=(%lu,%lu)\n",esr->currentpos,
          esr->idx->previousrange.start,
          esr->idx->previousrange.end);
#endif
  if (esr->idx->hasprevious)
  {
    if (!GT_ISDIRREVERSE(esr->readmode))
    {
      if (esr->currentpos >= esr->idx->previousrange.start)
      {
        if (esr->currentpos < esr->idx->previousrange.end)
        {
          return EXTRACTENCODEDCHAR(esr->encseq->twobitencoding,esr->currentpos)
                    ? (GtUchar) SEPARATOR
                    : (GtUchar) WILDCARD;
        }
        if (esr->idx->hasrange)
        {
          GT_APPENDINT(advancerangeGtEncseqReader)(esr);
        }
      }
    } else
    {
      if (esr->currentpos < esr->idx->previousrange.end)
      {
        if (esr->currentpos >= esr->idx->previousrange.start)
        {
          return EXTRACTENCODEDCHAR(esr->encseq->twobitencoding,esr->currentpos)
                     ? (GtUchar) SEPARATOR
                     : (GtUchar) WILDCARD;
        }
        if (esr->idx->hasrange)
        {
          GT_APPENDINT(advancerangeGtEncseqReader)(esr);
        }
      }
    }
  }
  return (GtUchar) EXTRACTENCODEDCHAR(esr->encseq->twobitencoding,
                                      esr->currentpos);
}

static unsigned long GT_APPENDINT(fwdgetnexttwobitencodingstopposViatables)(
                                      GtEncseqReader *esr)
{

  gt_assert(esr != NULL && esr->encseq != NULL &&
            satviautables(esr->encseq->sat));
  gt_assert(!GT_ISDIRREVERSE(esr->readmode));
  while (esr->idx->hasprevious)
  {
    if (esr->currentpos >= esr->idx->previousrange.start)
    {
      if (esr->currentpos < esr->idx->previousrange.end)
      {
        return esr->currentpos; /* is in current special range */
      }
      /* follows current special range */
      if (esr->idx->hasrange)
      {
        GT_APPENDINT(advancerangeGtEncseqReader)(esr);
      } else
      {
        break;
      }
    } else
    {
      return esr->idx->previousrange.start;
    }
  }
  return esr->encseq->totallength;
}

static unsigned long GT_APPENDINT(revgetnexttwobitencodingstopposViatables)(
                                               GtEncseqReader *esr)
{
  gt_assert(esr != NULL && esr->encseq != NULL &&
            satviautables(esr->encseq->sat));
  gt_assert(GT_ISDIRREVERSE(esr->readmode));
  while (esr->idx->hasprevious)
  {
    if (esr->currentpos < esr->idx->previousrange.end)
    {
      if (esr->currentpos >= esr->idx->previousrange.start)
      {
        return esr->currentpos+1; /* is in current special range */
      }
      /* follows current special range */
      if (esr->idx->hasrange)
      {
        GT_APPENDINT(advancerangeGtEncseqReader)(esr);
      } else
      {
        break;
      }
    } else
    {
      return esr->idx->previousrange.end;
    }
  }
  return 0; /* virtual stop at -1 */
}

static bool GT_APPENDINT(checkspecialrange)(
                         const GT_APPENDINT(GtSpecialtable) *specialtable,
                         unsigned long pos)
{
  unsigned long pagenumber = (unsigned long) GT_POS2PAGENUM(pos);
  const GT_SPECIALTABLETYPE *found, *start;

  if (pagenumber == 0)
  {
    if (specialtable->endsubsUint[0] >= 1UL)
    {
      start = specialtable->positions;
      found = GT_APPENDINT(binarysearchpreviousequal)(
                        start,
                        start + specialtable->endsubsUint[0] - 1,
                        (GT_SPECIALTABLETYPE) pos);
      if (found != NULL)
      {
        unsigned long rangeend
               = (unsigned long) *found
                 + (unsigned long) specialtable->rangelengths
                                               [(unsigned long) (found - start)]
                 + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    }
  } else
  {
    if (specialtable->endsubsUint[pagenumber-1] <
        specialtable->endsubsUint[pagenumber])
    {
      start = specialtable->positions;
      found = GT_APPENDINT(binarysearchpreviousequal)(
                        start +
                        specialtable->endsubsUint[pagenumber-1],
                        start +
                        specialtable->endsubsUint[pagenumber] - 1,
                        (GT_SPECIALTABLETYPE) pos);
      if (found != NULL)
      {
        unsigned long rangeend
               = (unsigned long) ((GT_MAXSPECIALTABLETYPE+1) * pagenumber)
                 + (unsigned long) *found
                 + (unsigned long) specialtable->rangelengths
                                               [(unsigned long) (found - start)]
                 + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    }
    if (pagenumber == 1UL)
    {
      if (specialtable->endsubsUint[0] > 1UL)
      {
        unsigned long idx;
        unsigned long rangeend;

        idx = specialtable->endsubsUint[0] - 1;
        rangeend = (unsigned long) specialtable->positions[idx] +
                   (unsigned long) specialtable->rangelengths[idx] + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    } else
    {
      if (specialtable->endsubsUint[pagenumber-2] <
          specialtable->endsubsUint[pagenumber-1])
      {
        unsigned long idx;
        unsigned long rangeend;

        idx = specialtable->endsubsUint[pagenumber-1] - 1;
        rangeend = (unsigned long) ((GT_MAXSPECIALTABLETYPE+1) * (pagenumber-1))
                   + (unsigned long) specialtable->positions[idx]
                   + (unsigned long) specialtable->rangelengths[idx]
                   + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    }
  }
  return false;
}
