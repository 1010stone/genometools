/*
  Copyright (c) 2007-2010 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2007-2010 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

static void GT_APPENDINT(allocSWtables)(GT_APPENDINT(GtSWtable) *swtable)
{
  swtable->positions = gt_malloc(sizeof (*swtable->positions) *
                                 swtable->numofrangestostore);
  swtable->rangelengths = gt_malloc(sizeof(*swtable->positions) *
                                    swtable->numofrangestostore);
  swtable->endidxinpage = gt_malloc(sizeof(unsigned long) *
                                    swtable->numofpages);
}

static int GT_APPENDINT(fillspecialrangetable)(GtEncseq *encseq,
                                               GtSequenceBuffer *fb,
                                               GtError *err)
{
  unsigned long fillspecialrangeidx = 0, fillwildcardrangeidx = 0,
                currentposition, pagenum = 0, nextcheckpos, widthbuffer = 0;
  int retval;
  unsigned int lastspecialrangelength = 0, lastwildcardrangelength = 0;
  GtUchar cc;
  GT_APPENDINT(GtSWtable) *specialrangetable
    = &(GT_APPENDINT(encseq->specialrangetable.st));
  GT_APPENDINT(GtSWtable) *wildcardrangetable
    = &(GT_APPENDINT(encseq->wildcardrangetable.st));
#ifndef NDEBUG
  unsigned long sumspecialranges = 0, countspecials = 0,
                sumwildcardranges = 0, countwildcards = 0;
#endif
  GtTwobitencoding *twobitencodingptr, bitwise = 0;
  GtTwobitencoding *twobitencodingSWptr, bitwiseSW = 0;

  encseq->unitsoftwobitencoding
    = gt_unitsoftwobitencoding(encseq->totallength);
  encseq->twobitencoding = gt_malloc(sizeof (*(encseq->twobitencoding)) *
                                     encseq->unitsoftwobitencoding);
  encseq->twobitencoding[encseq->unitsoftwobitencoding-1] = 0;
  twobitencodingptr = encseq->twobitencoding;
  encseq->twobitencodingSW = gt_malloc(sizeof (*(encseq->twobitencodingSW)) *
                                       encseq->unitsoftwobitencoding);
  encseq->twobitencodingSW[encseq->unitsoftwobitencoding-1] = 0;
  twobitencodingSWptr = encseq->twobitencodingSW;

  GT_APPENDINT(allocSWtables)(specialrangetable);
  GT_APPENDINT(allocSWtables)(wildcardrangetable);
  gt_assert(specialrangetable->maxrangevalue ==
            wildcardrangetable->maxrangevalue);
  nextcheckpos = (unsigned long) specialrangetable->maxrangevalue;

  for (currentposition=0; /* Nothing */; currentposition++)
  {
    retval = gt_sequence_buffer_next(fb,&cc,err);
    if (retval > 0)
    {
      if (ISNOTSPECIAL(cc))
      {
        if (lastspecialrangelength > 0)
        {
          /* when seeing the first character after a special range, process
             this an store the corresponding range length for the previous
             range */
          specialrangetable->rangelengths[fillspecialrangeidx-1]
            = (GT_SPECIALTABLETYPE) (lastspecialrangelength-1);
#ifndef NDEBUG
          sumspecialranges += (unsigned long) lastspecialrangelength;
#endif
          lastspecialrangelength = 0;
        }
        if (lastwildcardrangelength > 0)
        {
          /* when seeing the first character after a wildcard range, process
             this an store the corresponding range length for the previous
             range */
          wildcardrangetable->rangelengths[fillwildcardrangeidx-1]
            = (GT_SPECIALTABLETYPE) (lastwildcardrangelength-1);
#ifndef NDEBUG
          sumwildcardranges += (unsigned long) lastwildcardrangelength;
#endif
          lastwildcardrangelength = 0;
        }
      } else
      {
        if (cc == (GtUchar) WILDCARD)
        {
          countwildcards++;
          if (lastwildcardrangelength == 0) /* at beginning of wildcard range */
          {
            /* store remainder of currentposition: this value is not larger
               than maxrangevalue and this can be stored in a page */
            wildcardrangetable->positions[fillwildcardrangeidx++]
              = (GT_SPECIALTABLETYPE) (currentposition &
                                       wildcardrangetable->maxrangevalue);
            lastwildcardrangelength = 1U;
          } else /* extend wildcard range */
          {
            if (lastwildcardrangelength == wildcardrangetable->maxrangevalue)
                /* already at maximal length */
            {
              gt_assert(fillwildcardrangeidx > 0);
              wildcardrangetable->rangelengths[fillwildcardrangeidx-1]
                = (GT_SPECIALTABLETYPE) wildcardrangetable->maxrangevalue;
#ifndef NDEBUG
              sumwildcardranges
                += (1 + (unsigned long) wildcardrangetable->maxrangevalue);
#endif
              lastwildcardrangelength = 0;
            } else
            {
              lastwildcardrangelength++;
            }
          }
        } else
        {
          gt_assert(cc == (GtUchar) SEPARATOR);
          if (lastwildcardrangelength > 0)
          {
          /* when seeing the first character after a wildcard range, process
             this an store the corresponding range length for the previous
             range */
            wildcardrangetable->rangelengths[fillwildcardrangeidx-1]
              = (GT_SPECIALTABLETYPE) (lastwildcardrangelength-1);
#ifndef NDEBUG
            sumwildcardranges += (unsigned long) lastwildcardrangelength;
#endif
            lastwildcardrangelength = 0;
          }
        }
#ifndef NDEBUG
        countspecials++;
#endif
        if (lastspecialrangelength == 0) /* at beginning of special range */
        {
          /* store remainder of currentposition: this value is not larger
             than maxrangevalue and this can be stored in a page */
          specialrangetable->positions[fillspecialrangeidx++]
            = (GT_SPECIALTABLETYPE) (currentposition &
                                     specialrangetable->maxrangevalue);
          lastspecialrangelength = 1U;
        } else /* extend special range */
        {
          if (lastspecialrangelength == specialrangetable->maxrangevalue)
              /* already at maximal length */
          {
            gt_assert(fillspecialrangeidx > 0);
            specialrangetable->rangelengths[fillspecialrangeidx-1]
              = (GT_SPECIALTABLETYPE) specialrangetable->maxrangevalue;
#ifndef NDEBUG
            sumspecialranges
              += (1 + (unsigned long) specialrangetable->maxrangevalue);
#endif
            lastspecialrangelength = 0;
          } else
          {
            lastspecialrangelength++;
          }
        }
      }
    } else
    { /* now retval <= 0 */
      if (retval == 0)
      {
        if (lastspecialrangelength > 0)
        {
          /* note that we store one less than the length to prevent overflows */
          gt_assert(fillspecialrangeidx > 0);
          gt_assert(fillspecialrangeidx - 1 <
                    specialrangetable->numofrangestostore);
          specialrangetable->rangelengths[fillspecialrangeidx-1]
            = (GT_SPECIALTABLETYPE) (lastspecialrangelength-1);
#ifndef NDEBUG
          sumspecialranges += (unsigned long) lastspecialrangelength;
#endif
        }
        if (lastwildcardrangelength > 0)
        {
          /* note that we store one less than the length to prevent overflows */
          gt_assert(fillwildcardrangeidx > 0);
          gt_assert(fillwildcardrangeidx - 1 <
                    wildcardrangetable->numofrangestostore);
          wildcardrangetable->rangelengths[fillwildcardrangeidx-1]
            = (GT_SPECIALTABLETYPE) (lastwildcardrangelength-1);
#ifndef NDEBUG
          sumwildcardranges += (unsigned long) lastwildcardrangelength;
#endif
        }
        break;
      }
      gt_assert(retval < 0);
      return -1;
    }
    if (currentposition == nextcheckpos)
    {
      specialrangetable->endidxinpage[pagenum] = fillspecialrangeidx;
      wildcardrangetable->endidxinpage[pagenum] = fillwildcardrangeidx;
      pagenum++;
      nextcheckpos += (unsigned long) (specialrangetable->maxrangevalue+1);
    }
    bitwise <<= 2;
    bitwiseSW <<= 2;
    if (ISNOTSPECIAL(cc))
    {
      bitwise |= (GtTwobitencoding) cc;
      bitwiseSW |= (GtTwobitencoding) cc;
    } else
    {
      if (cc == (GtUchar) SEPARATOR)
      {
        bitwise |= (GtTwobitencoding) 1;
      }
    }
    if (widthbuffer < (unsigned long) (GT_UNITSIN2BITENC - 1))
    {
      widthbuffer++;
    } else
    {
      *twobitencodingptr++ = bitwise;
      *twobitencodingSWptr++ = bitwiseSW;
      widthbuffer = 0;
      bitwise = 0;
      bitwiseSW = 0;
    }
  }
  UPDATESEQBUFFERFINAL;
  gt_assert(sumspecialranges == countspecials);
  if (sumwildcardranges != countwildcards)
  {
    fprintf(stderr,"sumwildcardranges = %lu != %lu = countwildcards\n",
                    sumwildcardranges,countwildcards);
    exit(EXIT_FAILURE);
  }
  gt_assert(sumwildcardranges == countwildcards);
  while (pagenum < specialrangetable->numofpages)
  {
    specialrangetable->endidxinpage[pagenum] = fillspecialrangeidx;
    wildcardrangetable->endidxinpage[pagenum] = fillwildcardrangeidx;
    pagenum++;
  }
  return 0;
}

#ifdef GT_RANGEDEBUG

static void GT_APPENDINT(showspecialpositionswithpages)
                            (const GT_APPENDINT(GtSWtable) *swtable,
                             unsigned long pgnum,
                             unsigned long offset,
                             unsigned long first,
                             unsigned long last)
{
  unsigned long idx, startpos;
  GtRange range;

  printf("page %lu: %lu elems at offset %lu\n",
          pgnum, last - first + 1, offset);
  for (idx=first; idx<=last; idx++)
  {
    startpos = (unsigned long) swtable->positions[idx];
    range.start = offset + startpos;
    range.end = range.start + swtable->rangelengths[idx] + 1;
    printf("%lu: ",idx);
    showsequencerange(&range);
    printf("\n");
  }
}

static void GT_APPENDINT(showallspecialpositionswithpages)(
                            const GT_APPENDINT(GtSWtable) *swtable)
{
  unsigned long endpos0, endpos1, pgnum, offset = 0;

  for (pgnum=0; pgnum < swtable->numofpages; pgnum++)
  {
    if (pgnum == 0)
    {
      endpos0 = 0;
    } else
    {
      endpos0 = swtable->endidxinpage[pgnum-1];
    }
    endpos1 = swtable->endidxinpage[pgnum];
    if (endpos0 < endpos1)
    {
      GT_APPENDINT(showspecialpositionswithpages)(swtable,pgnum,offset,
                                                  endpos0,endpos1-1);
    }
    offset += 1UL + (unsigned long) swtable->maxrangevalue;
  }
}
#endif

/*@null@*/ static const GT_SPECIALTABLETYPE
                *GT_APPENDINT(binarysearchpreviousequal)(
                                           const GT_SPECIALTABLETYPE *leftptr,
                                           const GT_SPECIALTABLETYPE *rightptr,
                                           GT_SPECIALTABLETYPE pos)
{
  const GT_SPECIALTABLETYPE *midptr,
                    *found = NULL;

  while (leftptr <= rightptr)
  {
    midptr = leftptr + GT_DIV2((unsigned long) (rightptr-leftptr));
    if (pos < *midptr)
    {
      rightptr = midptr - 1;
    } else
    {
      if (pos > *midptr)
      {
        found = midptr;
        leftptr = midptr + 1;
      } else
      {
        found = midptr;
        break;
      }
    }
  }
  return found;
}

static void GT_APPENDINT(determinerange)(GtRange *range,
                                         const GT_APPENDINT(GtSWtable)
                                           *swtable,
                                         unsigned long transpagenum,
                                         unsigned long cellnum)
{
  range->start = transpagenum *
                 (1UL + (unsigned long) swtable->maxrangevalue) +
                 swtable->positions[cellnum];
  range->end = range->start +
               swtable->rangelengths[cellnum] + 1;
}

static void GT_APPENDINT(binpreparenextrangeGtEncseqReader)(GtEncseqReader *esr)
{
  unsigned long endpos0, endpos1, cellnum, pagenum;
  bool found = false;
  GtRange range;
  bool moveforward = GT_ISDIRREVERSE(esr->readmode) ? false : true;
  GT_APPENDINT(GtSWtable) *specialrangetable
    = &(GT_APPENDINT(esr->encseq->specialrangetable.st));

  pagenum = GT_POS2PAGENUM(esr->currentpos);
  if (pagenum > 0)
  {
    endpos0 = specialrangetable->endidxinpage[pagenum-1];
  } else
  {
    endpos0 = 0;
  }
  esr->idx->firstcell = endpos0;
  esr->idx->lastcell = endpos1
                     = specialrangetable->endidxinpage[pagenum];
  if (esr->currentpos > 0)
  {
    while (endpos0  < endpos1)
    {
      cellnum = endpos0 + GT_DIV2(endpos1 - endpos0 - 1);
      GT_APPENDINT(determinerange)(&range,specialrangetable,pagenum,cellnum);
#ifdef RANGEDEBUG
      printf("binsearch in [%lu,%lu] => mid = %lu => ",endpos0,endpos1,cellnum);
      showsequencerange(&range);
      printf("\n");
#endif
      if (moveforward)
      {
        if (esr->currentpos > range.end)
        {
          found = true;
          esr->idx->firstcell = cellnum;
          endpos0 = cellnum+1;
        } else
        {
          if (esr->currentpos >= range.start)
          {
            found = true;
            esr->idx->firstcell = cellnum;
            break;
          }
          endpos1 = cellnum;
        }
      } else
      {
        if (esr->currentpos < range.start)
        {
          found = true;
          esr->idx->lastcell = cellnum+1;
          endpos1 = cellnum;
        } else
        {
          if (esr->currentpos < range.end)
          {
            found = true;
            esr->idx->lastcell = cellnum+1;
            break;
          }
          endpos0 = cellnum+1;
        }
      }
    }
  } else
  {
    if (endpos0  < endpos1)
    {
      GT_APPENDINT(determinerange)(&range,specialrangetable,pagenum,0);
      if (moveforward)
      {
        if (range.start == 0)
        {
          found = true;
          esr->idx->firstcell = 0;
        }
      } else
      {
        found = true;
        esr->idx->lastcell = 1UL;
      }
    }
  }
  if (moveforward && !found && pagenum > 0)
  {
    if (pagenum == 1UL)
    {
      endpos0 = 0;
    } else
    {
      endpos0 = specialrangetable->endidxinpage[pagenum-2];
    }
    endpos1 = specialrangetable->endidxinpage[pagenum-1];
    if (endpos0 < endpos1)
    {
      esr->idx->firstcell = endpos1-1;
      esr->idx->lastcell = endpos1;
      pagenum--;
      found = true;
    }
  }
#ifdef RANGEDEBUG
  if (found)
  {
    GT_APPENDINT(determinerange)(&range,specialrangetable,pagenum,
                                 moveforward ? esr->idx->firstcell
                                             : (esr->idx->lastcell-1));
    printf("binary found pos %lu in ", esr->currentpos);
    showsequencerange(&range);
    printf(" at cell %lu in page %lu\n",
           moveforward ? esr->idx->firstcell : (esr->idx->lastcell-1),
           pagenum);
  } else
  {
    printf("no nearby interval found for startpos %lu\n",esr->currentpos);
  }
#endif
  if (found)
  {
    GT_APPENDINT(determinerange)(&esr->idx->previousrange,specialrangetable,
                                 pagenum,
                                 moveforward ? esr->idx->firstcell
                                             : (esr->idx->lastcell-1));
#ifdef RANGEDEBUG
    printf("previousrange=");
    showsequencerange(&esr->idx->previousrange);
    printf("\n");
#endif
    if (esr->idx->previousrange.start <= esr->currentpos &&
        esr->currentpos < esr->idx->previousrange.end)
    {
      esr->idx->hasprevious = true;
    }
    if (moveforward)
    {
      if (pagenum+1 < specialrangetable->numofpages)
      {
        esr->idx->morepagesleft = true;
        esr->idx->nextpage = pagenum+1;
      } else
      {
        esr->idx->morepagesleft = false;
        esr->idx->nextpage = pagenum;
      }
    } else
    {
      if (pagenum > 0)
      {
        esr->idx->morepagesleft = true;
        esr->idx->nextpage = pagenum-1;
      } else
      {
        esr->idx->morepagesleft = false;
        esr->idx->nextpage = 0;
      }
    }
  } else
  {
    esr->idx->firstcell = esr->idx->lastcell = 0;
    if (pagenum < specialrangetable->numofpages)
    {
      esr->idx->morepagesleft = true;
    } else
    {
      esr->idx->morepagesleft = false;
    }
    esr->idx->nextpage = pagenum;
  }
}

/*
   find next not empty page and set firstcell to the first index in the
   page and lastcell to the last plus 1 index of the page.
*/

static bool GT_APPENDINT(nextnonemptypage)(GtEncseqReader *esr,
                                           bool moveforward)
{
  unsigned long endpos0, endpos1, pagenum;
  GT_APPENDINT(GtSWtable) *specialrangetable
    = &(GT_APPENDINT(esr->encseq->specialrangetable.st));

  while (esr->idx->morepagesleft)
  {
    pagenum = esr->idx->nextpage;
    if (moveforward)
    {
      if (esr->idx->nextpage == specialrangetable->numofpages-1)
      {
        esr->idx->morepagesleft = false;
      } else
      {
        esr->idx->nextpage++;
      }
    } else
    {
      if (esr->idx->nextpage == 0)
      {
        esr->idx->morepagesleft = false;
      } else
      {
        esr->idx->nextpage--;
      }
    }
    if (pagenum == 0)
    {
      endpos0 = 0;
    } else
    {
      endpos0 = specialrangetable->endidxinpage[pagenum-1];
    }
    endpos1 = specialrangetable->endidxinpage[pagenum];
    if (endpos0 < endpos1)
    {
      esr->idx->firstcell = endpos0;
      esr->idx->lastcell = endpos1;
      return true;
    }
  }
  return false;
}

static void GT_APPENDINT(advancerangeGtEncseqReader)(GtEncseqReader *esr)
{
  unsigned long cellnum;
  bool moveforward = GT_ISDIRREVERSE(esr->readmode) ? false : true;
  GT_APPENDINT(GtSWtable) *specialrangetable
    = &(GT_APPENDINT(esr->encseq->specialrangetable.st));

  while (true)
  {
    if (esr->idx->hascurrent)
    {
      esr->idx->previousrange = esr->idx->currentrange;
      esr->idx->hascurrent = false;
    }
    if (moveforward)
    {
      esr->idx->firstcell++;
    } else
    {
      esr->idx->lastcell--;
    }
#ifdef RANGEDEBUG
    printf("advance with firstcell=%lu, lastcell=%lu\n",
            esr->idx->firstcell,esr->idx->lastcell);
#endif
    /* do not let comparison values become negative, hence compare with + 1 */
    if (esr->idx->firstcell + 1 < esr->idx->lastcell + 1 ||
        GT_APPENDINT(nextnonemptypage)(esr,moveforward))
    {
      if (moveforward)
      {
        cellnum = esr->idx->firstcell;
      } else
      {
        cellnum = esr->idx->lastcell - 1;
      }
      GT_APPENDINT(determinerange)(&esr->idx->currentrange,specialrangetable,
                                   esr->idx->morepagesleft
                                     ? (moveforward ? (esr->idx->nextpage-1)
                                                    : (esr->idx->nextpage+1))
                                     : esr->idx->nextpage,
                                   cellnum);
      esr->idx->hasrange = true;
    } else
    {
      esr->idx->hasrange = false;
      break;
    }
    if (esr->idx->hasprevious)
    {
      if (moveforward)
      {
        if (esr->idx->previousrange.end == esr->idx->currentrange.start)
        {
          esr->idx->previousrange.end = esr->idx->currentrange.end;
          esr->idx->hascurrent = false;
        } else
        {
          esr->idx->hascurrent = true;
          break;
        }
      } else
      {
        if (esr->idx->currentrange.end == esr->idx->previousrange.start)
        {
          esr->idx->previousrange.start = esr->idx->currentrange.start;
          esr->idx->hascurrent = false;
        } else
        {
          esr->idx->hascurrent = true;
          break;
        }
      }
    } else
    {
      esr->idx->previousrange = esr->idx->currentrange;
      esr->idx->hasprevious = true;
      esr->idx->hascurrent = false;
    }
  }
}

static GtUchar GT_APPENDINT(seqdelivercharSpecial)(GtEncseqReader *esr)
{
#ifdef RANGEDEBUG
  printf("pos=%lu,previous=(%lu,%lu)\n",esr->currentpos,
          esr->idx->previousrange.start,
          esr->idx->previousrange.end);
#endif
  if (esr->idx->hasprevious)
  {
    if (!GT_ISDIRREVERSE(esr->readmode))
    {
      if (esr->currentpos >= esr->idx->previousrange.start)
      {
        if (esr->currentpos < esr->idx->previousrange.end)
        {
          return EXTRACTENCODEDCHAR(esr->encseq->twobitencoding,esr->currentpos)
                    ? (GtUchar) SEPARATOR
                    : (GtUchar) WILDCARD;
        }
        if (esr->idx->hasrange)
        {
          GT_APPENDINT(advancerangeGtEncseqReader)(esr);
        }
      }
    } else
    {
      if (esr->currentpos < esr->idx->previousrange.end)
      {
        if (esr->currentpos >= esr->idx->previousrange.start)
        {
          return EXTRACTENCODEDCHAR(esr->encseq->twobitencoding,esr->currentpos)
                     ? (GtUchar) SEPARATOR
                     : (GtUchar) WILDCARD;
        }
        if (esr->idx->hasrange)
        {
          GT_APPENDINT(advancerangeGtEncseqReader)(esr);
        }
      }
    }
  }
  return (GtUchar) EXTRACTENCODEDCHAR(esr->encseq->twobitencoding,
                                      esr->currentpos);
}

static unsigned long GT_APPENDINT(fwdgetnexttwobitencodingstopposViatables)(
                                      GtEncseqReader *esr)
{

  gt_assert(esr != NULL && esr->encseq != NULL &&
            satviautables(esr->encseq->sat));
  gt_assert(!GT_ISDIRREVERSE(esr->readmode));
  while (esr->idx->hasprevious)
  {
    if (esr->currentpos >= esr->idx->previousrange.start)
    {
      if (esr->currentpos < esr->idx->previousrange.end)
      {
        return esr->currentpos; /* is in current special range */
      }
      /* follows current special range */
      if (esr->idx->hasrange)
      {
        GT_APPENDINT(advancerangeGtEncseqReader)(esr);
      } else
      {
        break;
      }
    } else
    {
      return esr->idx->previousrange.start;
    }
  }
  return esr->encseq->totallength;
}

static unsigned long GT_APPENDINT(revgetnexttwobitencodingstopposViatables)(
                                               GtEncseqReader *esr)
{
  gt_assert(esr != NULL && esr->encseq != NULL &&
            satviautables(esr->encseq->sat));
  gt_assert(GT_ISDIRREVERSE(esr->readmode));
  while (esr->idx->hasprevious)
  {
    if (esr->currentpos < esr->idx->previousrange.end)
    {
      if (esr->currentpos >= esr->idx->previousrange.start)
      {
        return esr->currentpos+1; /* is in current special range */
      }
      /* follows current special range */
      if (esr->idx->hasrange)
      {
        GT_APPENDINT(advancerangeGtEncseqReader)(esr);
      } else
      {
        break;
      }
    } else
    {
      return esr->idx->previousrange.end;
    }
  }
  return 0; /* virtual stop at -1 */
}

static bool GT_APPENDINT(checkspecialrange)(
                         const GT_APPENDINT(GtSWtable) *swtable,
                         unsigned long pos)
{
  unsigned long pagenumber = (unsigned long) GT_POS2PAGENUM(pos);
  const GT_SPECIALTABLETYPE *found;

  if (pagenumber == 0)
  {
    if (swtable->endidxinpage[0] >= 1UL)
    {
      found = GT_APPENDINT(binarysearchpreviousequal)(
                        swtable->positions,
                        swtable->positions + swtable->endidxinpage[0] - 1,
                        (GT_SPECIALTABLETYPE) pos);
      if (found != NULL)
      {
        unsigned long rangeend
               = (unsigned long) *found
                 + (unsigned long) swtable->rangelengths
                                  [(unsigned long) (found - swtable->positions)]
                 + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    }
  } else
  {
    if (swtable->endidxinpage[pagenumber-1] <
        swtable->endidxinpage[pagenumber])
    {
      found = GT_APPENDINT(binarysearchpreviousequal)(
                        swtable->positions +
                        swtable->endidxinpage[pagenumber-1],
                        swtable->positions +
                        swtable->endidxinpage[pagenumber] - 1,
                        (GT_SPECIALTABLETYPE) pos);
      if (found != NULL)
      {
        unsigned long rangeend
               = (unsigned long) ((swtable->maxrangevalue+1) * pagenumber)
                 + (unsigned long) *found
                 + (unsigned long) swtable->rangelengths
                                  [(unsigned long) (found - swtable->positions)]
                 + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    }
    if (pagenumber == 1UL)
    {
      if (swtable->endidxinpage[0] > 1UL)
      {
        unsigned long idx, rangeend;

        idx = swtable->endidxinpage[0] - 1;
        rangeend = (unsigned long) swtable->positions[idx] +
                   (unsigned long) swtable->rangelengths[idx] + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    } else
    {
      if (swtable->endidxinpage[pagenumber-2] <
          swtable->endidxinpage[pagenumber-1])
      {
        unsigned long idx, rangeend;

        idx = swtable->endidxinpage[pagenumber-1] - 1;
        rangeend = (unsigned long) ((swtable->maxrangevalue+1) * (pagenumber-1))
                   + (unsigned long) swtable->positions[idx]
                   + (unsigned long) swtable->rangelengths[idx]
                   + 1;
        if (pos < rangeend)
        {
          return true;
        }
      }
    }
  }
  return false;
}
