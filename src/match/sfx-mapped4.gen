/*
  Copyright (c) 2007-2010 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2007-2010 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

static GtCodetype PROCESSKMERPREFIX(getencseqkmers_nospecialtwobitencoding)(
                                    const GtSfxmapped4constinfo *mapped4info,
                                    const GtReadmode readmode,
                                    PROCESSKMERTYPE *processkmercodeinfo,
                                    unsigned long startpos,
                                    unsigned long endpos)
{
  unsigned long pos, unitindex;
  GtCodetype code, transcode;
  GtTwobitencoding currentencoding;
  unsigned int shiftright;
  GtUchar cc;
#ifdef GT_WITHMARKSUBSTRINGTMPCODE
  GtCodetype marksubstringtmpcode;
#endif

  gt_assert(mapped4info->kmersize > 1U);
  if (GT_ISDIRREVERSE(readmode))
  {
    unsigned long startpos2;

    gt_assert(endpos >= (unsigned long) mapped4info->upperkmersize);
    pos = endpos - (unsigned long) mapped4info->kmersize;
    unitindex = (pos > 0) ? GT_DIVBYUNITSIN2BITENC(pos-1) : 0;
    code = gt_kmercode_reverse(gt_kmercode_at_position(
                                        mapped4info->twobitencoding,pos,
                                        mapped4info->kmersize),
                               mapped4info->kmersize);
    transcode = GT_ISDIRCOMPLEMENT(readmode)
                  ? gt_kmercode_complement(code,mapped4info->maskright)
                  : code;
    PROCESSKMERCODE(processkmercodeinfo,
                    true,
                    GT_ADJUSTREVERSEPOS(mapped4info->rightbound,pos),
                    transcode);
    currentencoding = mapped4info->twobitencoding[unitindex];
    startpos2 = startpos + (mapped4info->upperkmersize - mapped4info->kmersize);
    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(pos-1));
    while (pos > startpos2)
    {
      pos--;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      GT_UPDATEKMER(code,cc,mapped4info->maskright);
      transcode = (readmode == GT_READMODE_REVCOMPL)
                    ? gt_kmercode_complement(code,mapped4info->maskright)
                    : code;
      PROCESSKMERCODE(processkmercodeinfo,
                      false,GT_ADJUSTREVERSEPOS(mapped4info->rightbound,pos),
                      transcode);
      if (shiftright < (unsigned int) (GT_INTWORDSIZE-2))
      {
        shiftright += 2;
      } else
      {
        gt_assert(unitindex > 0 || pos == startpos2);
        if (unitindex > 0)
        {
          currentencoding = mapped4info->twobitencoding[--unitindex];
        }
        shiftright = 0;
      }
    }
  } else
  {
    pos = startpos;
    unitindex = GT_DIVBYUNITSIN2BITENC(startpos+mapped4info->kmersize);
    code = gt_kmercode_at_position(mapped4info->twobitencoding,pos,
                                   mapped4info->kmersize);
    transcode = GT_ISDIRCOMPLEMENT(readmode)
                  ? gt_kmercode_complement(code,mapped4info->maskright)
                  : code;
    PROCESSKMERCODE(processkmercodeinfo,
                    true,
                    pos,
                    transcode);
    currentencoding = mapped4info->twobitencoding[unitindex];
    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(startpos +
                                                 mapped4info->kmersize));
    while (pos < endpos - (unsigned long) mapped4info->upperkmersize)
    {
      pos++;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      GT_UPDATEKMER(code,cc,mapped4info->maskright);
      transcode = (readmode == GT_READMODE_COMPL)
                    ? gt_kmercode_complement(code,mapped4info->maskright)
                    : code;
      PROCESSKMERCODE(processkmercodeinfo,false,pos,transcode);
      if (shiftright > 0)
      {
        shiftright -= 2;
      } else
      {
        gt_assert(unitindex < mapped4info->maxunitindex-1 ||
                  pos == endpos - (unsigned long) mapped4info->upperkmersize);
        if (unitindex < mapped4info->maxunitindex-1)
        {
          currentencoding = mapped4info->twobitencoding[++unitindex];
        }
        shiftright = (unsigned int) (GT_INTWORDSIZE-2);
      }
    }
  }
  return code;
}

static void PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                             const GtSfxmapped4constinfo *mapped4info,
                             GtReadmode readmode,
                             PROCESSKMERTYPE *processkmercodeinfo,
                             PROCESSKMERSPECIALTYPE *processkmerspecialinfo,
                             unsigned long startpos,
                             unsigned long endpos)
{
  GtCodetype lastcode;

  if (mapped4info->mirrored && startpos >= mapped4info->realtotallength)
  {
    gt_readmode_invert(readmode);
    startpos = GT_REVERSEPOS(mapped4info->realtotallength,
                             startpos - mapped4info->realtotallength - 2);
    if (endpos == mapped4info->totallength)
    {
      endpos = 0;
    } else
    {
      endpos = GT_REVERSEPOS(mapped4info->realtotallength,
                             endpos - mapped4info->realtotallength - 2);
    }
    if (startpos > endpos)
    {
      unsigned long tmp = startpos;
      startpos = endpos;
      endpos = tmp;
    }
    gt_assert(startpos <= endpos);
    gt_assert(endpos <= mapped4info->realtotallength);
  }
  if (endpos - startpos >= (unsigned long) mapped4info->upperkmersize)
  {
    gt_assert(endpos > 0);
    lastcode = PROCESSKMERPREFIX(getencseqkmers_nospecialtwobitencoding)(
                                                      mapped4info,
                                                      readmode,
                                                      processkmercodeinfo,
                                                      startpos,
                                                      endpos);
#ifdef PROCESSKMERCODESPECIAL
    {
      GtCodetype newcode;
      if (GT_ISDIRCOMPLEMENT(readmode))
      {
        lastcode = gt_kmercode_complement(lastcode,mapped4info->maskright);
      }
      newcode = ((lastcode << 2) | 3UL) & mapped4info->maskright;
      PROCESSKMERCODESPECIAL(processkmerspecialinfo,
                             mapped4info->kmersize-1,
                             (unsigned int) newcode,
                             GT_ISDIRREVERSE(readmode)
                               ? (mapped4info->totallength-startpos)
                               : endpos);
    }
#endif
  }
#ifdef PROCESSKMERCODESPECIAL
  else
  {
    if (startpos < endpos)
    {
      GtCodetype newcode;
      unsigned int fillpos;

      fillpos = (unsigned int) (mapped4info->kmersize - (endpos - startpos));
      lastcode = gt_kmercode_at_position(mapped4info->twobitencoding,startpos,
                                         (unsigned int) (endpos - startpos));
      if (GT_ISDIRREVERSE(readmode) && (unsigned int) (endpos - startpos) > 1U)
      {
        lastcode = gt_kmercode_reverse(lastcode,
                                       (unsigned int) (endpos-startpos));
      }
      if (GT_ISDIRCOMPLEMENT(readmode))
      {
        lastcode = gt_kmercode_complement(lastcode,mapped4info->maskright);
      }
      newcode
        = ((lastcode << GT_MULT2(fillpos)) | ((1UL << GT_MULT2(fillpos)) - 1))
           & mapped4info->maskright;
      PROCESSKMERCODESPECIAL(processkmerspecialinfo,
                             (unsigned int) (endpos - startpos),
                             (unsigned int) newcode,
                             GT_ISDIRREVERSE(readmode)
                               ? (mapped4info->totallength - startpos)
                               : endpos);
    }
  }
#endif
}

#ifndef GT_MAPPED4_GLOBAL
static
#endif
void PROCESSKMERPREFIX(getencseqkmers_twobitencoding)(
                               const GtEncseq *encseq,
                               const GtReadmode readmode,
                               unsigned int kmersize,
                               unsigned int upperkmersize,
                               PROCESSKMERTYPE *processkmercodeinfo,
                               PROCESSKMERSPECIALTYPE *processkmerspecialinfo)
{
  unsigned long laststart = 0, lastend;
  GtSfxmapped4constinfo mapped4info;

  mapped4info.twobitencoding = gt_encseq_twobitencoding_export(encseq);
  lastend = mapped4info.totallength = gt_encseq_total_length(encseq);
  mapped4info.maxunitindex
    = gt_unitsoftwobitencoding(mapped4info.totallength) - 1;
  mapped4info.maskright = GT_MASKRIGHT(kmersize);
  mapped4info.kmersize = kmersize;
  mapped4info.upperkmersize = upperkmersize;
  mapped4info.mirrored = gt_encseq_is_mirrored(encseq);
  mapped4info.rightbound = mapped4info.totallength - mapped4info.kmersize;
  if (mapped4info.mirrored)
  {
    gt_assert(GT_MOD2(mapped4info.totallength) == 1UL);
    mapped4info.realtotallength = GT_DIV2(mapped4info.totallength - 1);
  } else
  {
    mapped4info.realtotallength = mapped4info.totallength;
  }
  if (gt_encseq_has_specialranges(encseq))
  {
    GtSpecialrangeiterator *sri;
    GtRange range;

    if (GT_ISDIRREVERSE(readmode))
    {
      sri = gt_specialrangeiterator_new(encseq,false);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.end <= lastend);
        PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                           &mapped4info,
                                           readmode,
                                           processkmercodeinfo,
                                           processkmerspecialinfo,
                                           range.end,
                                           lastend);
        lastend = range.start;
      }
    } else
    {
      sri = gt_specialrangeiterator_new(encseq,true);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.start >= laststart);
        /*printf("region of length %lu\n",range.start - laststart);*/
        PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                           &mapped4info,
                                           readmode,
                                           processkmercodeinfo,
                                           processkmerspecialinfo,
                                           laststart,
                                           range.start);
        laststart = range.end;
      }
    }
    gt_assert(mapped4info.totallength >= laststart);
    gt_specialrangeiterator_delete(sri);
  }
  PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                     &mapped4info,
                                     readmode,
                                     processkmercodeinfo,
                                     processkmerspecialinfo,
                                     GT_ISDIRREVERSE(readmode)
                                       ? 0
                                       : laststart,
                                     GT_ISDIRREVERSE(readmode)
                                       ? lastend
                                       : mapped4info.totallength);
}
