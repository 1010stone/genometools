/*
  Copyright (c) 2007-2010 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2007-2010 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

static GtCodetype PROCESSKMERPREFIX(getencseqkmers_nospecialtwobitencoding)(
                                    const GtTwobitencoding *twobitencoding,
#ifndef GT_IGNORERIGHTBOUND
                                    unsigned long totallength,
#endif
                                    unsigned long maxunitindex,
                                    GtCodetype maskright,
                                    const GtReadmode readmode,
                                    unsigned int kmersize,
                                    unsigned int upperkmersize,
                                    PROCESSKMERTYPE *processkmercodeinfo,
                                    unsigned long startpos,
                                    unsigned long endpos)
{
  unsigned long pos, unitindex;
  unsigned int shiftright;
  GtCodetype code, transcode;
  GtUchar cc;
  GtTwobitencoding currentencoding;
#ifndef GT_IGNORERIGHTBOUND
  unsigned long rightbound = totallength - kmersize;
#endif
#ifdef GT_WITHMARKSUBSTRINGTMPCODE
  GtCodetype marksubstringtmpcode;
#endif

  gt_assert(kmersize > 1U);
  if (GT_ISDIRREVERSE(readmode))
  {
    unsigned long startpos2;

    gt_assert(endpos >= (unsigned long) upperkmersize);
    pos = endpos - (unsigned long) kmersize;
    unitindex = (pos > 0) ? GT_DIVBYUNITSIN2BITENC(pos-1) : 0;
    code = gt_kmercode_reverse(gt_kmercode_at_position(twobitencoding,pos,
                                                       kmersize),
                               kmersize);
    transcode = GT_ISDIRCOMPLEMENT(readmode)
                  ? gt_kmercode_complement(code,maskright)
                  : code;
    PROCESSKMERCODE(processkmercodeinfo,
                    true,
                    GT_ADJUSTREVERSEPOS(pos),
                    transcode);
    currentencoding = twobitencoding[unitindex];
    startpos2 = startpos + (upperkmersize - kmersize);
    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(pos-1));
    while (pos > startpos2)
    {
      pos--;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      GT_UPDATEKMER(code,cc);
      transcode = (readmode == GT_READMODE_REVCOMPL)
                    ? gt_kmercode_complement(code,maskright)
                    : code;
      PROCESSKMERCODE(processkmercodeinfo,
                      false,GT_ADJUSTREVERSEPOS(pos),
                      transcode);
      if (shiftright < (unsigned int) (GT_INTWORDSIZE-2))
      {
        shiftright += 2;
      } else
      {
        gt_assert(unitindex > 0 || pos == startpos2);
        if (unitindex > 0)
        {
          currentencoding = twobitencoding[--unitindex];
        }
        shiftright = 0;
      }
    }
  } else
  {
    pos = startpos;
    unitindex = GT_DIVBYUNITSIN2BITENC(startpos+kmersize);
    code = gt_kmercode_at_position(twobitencoding,pos,kmersize);
    transcode = GT_ISDIRCOMPLEMENT(readmode)
                  ? gt_kmercode_complement(code,maskright)
                  : code;
    PROCESSKMERCODE(processkmercodeinfo,
                    true,
                    pos,
                    transcode);
    currentencoding = twobitencoding[unitindex];
    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(startpos+kmersize));
    while (pos < endpos - (unsigned long) upperkmersize)
    {
      pos++;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      GT_UPDATEKMER(code,cc);
      transcode = (readmode == GT_READMODE_COMPL)
                    ? gt_kmercode_complement(code,maskright)
                    : code;
      PROCESSKMERCODE(processkmercodeinfo,false,pos,transcode);
      if (shiftright > 0)
      {
        shiftright -= 2;
      } else
      {
        gt_assert(unitindex < maxunitindex-1 ||
                  pos == endpos - (unsigned long) upperkmersize);
        if (unitindex < maxunitindex-1)
        {
          currentencoding = twobitencoding[++unitindex];
        }
        shiftright = (unsigned int) (GT_INTWORDSIZE-2);
      }
    }
  }
  return code;
}

static void PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                             const GtTwobitencoding *twobitencoding,
                             unsigned long totallength,
                             unsigned long maxunitindex,
                             unsigned long realtotallength,
                             bool mirrored,
                             GtCodetype maskright,
                             GtReadmode readmode,
                             unsigned int kmersize,
                             unsigned int upperkmersize,
                             PROCESSKMERTYPE *processkmercodeinfo,
                             PROCESSKMERSPECIALTYPE *processkmerspecialinfo,
                             unsigned long startpos,
                             unsigned long endpos)
{
  GtCodetype lastcode;

  if (mirrored && startpos >= realtotallength)
  {
    gt_readmode_invert(readmode);
    startpos = GT_REVERSEPOS(realtotallength, startpos - realtotallength - 2);
    if (endpos == totallength)
    {
      endpos = 0;
    } else
    {
      endpos = GT_REVERSEPOS(realtotallength, endpos - realtotallength - 2);
    }
    if (startpos > endpos)
    {
      unsigned long tmp = startpos;
      startpos = endpos;
      endpos = tmp;
    }
    gt_assert(startpos <= endpos);
    gt_assert(endpos <= realtotallength);
  }
  if (endpos - startpos >= (unsigned long) upperkmersize)
  {
    gt_assert(endpos > 0);
    lastcode = PROCESSKMERPREFIX(getencseqkmers_nospecialtwobitencoding)(
                                                      twobitencoding,
#ifndef GT_IGNORERIGHTBOUND
                                                      totallength,
#endif
                                                      maxunitindex,
                                                      maskright,
                                                      readmode,
                                                      kmersize,
                                                      upperkmersize,
                                                      processkmercodeinfo,
                                                      startpos,
                                                      endpos);
#ifdef PROCESSKMERCODESPECIAL
    {
      GtCodetype newcode;
      if (GT_ISDIRCOMPLEMENT(readmode))
      {
        lastcode = gt_kmercode_complement(lastcode,maskright);
      }
      newcode = ((lastcode << 2) | 3UL) & maskright;
      PROCESSKMERCODESPECIAL(processkmerspecialinfo,
                             kmersize-1,
                             (unsigned int) newcode,
                             GT_ISDIRREVERSE(readmode) ? (totallength-startpos)
                                                       : endpos);
    }
#endif
  }
#ifdef PROCESSKMERCODESPECIAL
  else
  {
    if (startpos < endpos)
    {
      GtCodetype newcode;
      unsigned int fillpos;

      fillpos = (unsigned int) (kmersize - (endpos - startpos));
      lastcode = gt_kmercode_at_position(twobitencoding,startpos,
                                         (unsigned int) (endpos - startpos));
      if (GT_ISDIRREVERSE(readmode) && (unsigned int) (endpos - startpos) > 1U)
      {
        lastcode = gt_kmercode_reverse(lastcode,
                                       (unsigned int) (endpos-startpos));
      }
      if (GT_ISDIRCOMPLEMENT(readmode))
      {
        lastcode = gt_kmercode_complement(lastcode,maskright);
      }
      newcode
        = ((lastcode << GT_MULT2(fillpos)) | ((1UL << GT_MULT2(fillpos)) - 1))
           & maskright;
      PROCESSKMERCODESPECIAL(processkmerspecialinfo,
                             (unsigned int) (endpos - startpos),
                             (unsigned int) newcode,
                             GT_ISDIRREVERSE(readmode)
                               ? (totallength - startpos)
                               : endpos);
    }
  }
#endif
}

#ifndef GT_MAPPED4_GLOBAL
static
#endif
void PROCESSKMERPREFIX(getencseqkmers_twobitencoding)(
                               const GtEncseq *encseq,
                               const GtReadmode readmode,
                               unsigned int kmersize,
                               unsigned int upperkmersize,
                               PROCESSKMERTYPE *processkmercodeinfo,
                               PROCESSKMERSPECIALTYPE *processkmerspecialinfo)
{
  unsigned long laststart = 0, maxunitindex, lastend,
                totallength,
                realtotallength;
  const GtTwobitencoding *twobitencoding
    = gt_encseq_twobitencoding_export(encseq);
  const GtCodetype maskright = GT_MASKRIGHT(kmersize);
  bool mirrored = gt_encseq_is_mirrored(encseq);

  lastend = totallength = realtotallength = gt_encseq_total_length(encseq);
  maxunitindex = gt_unitsoftwobitencoding(totallength) - 1;
  if (mirrored)
  {
    gt_assert((totallength & 1) == 1UL);
    realtotallength = (realtotallength - 1) / 2;
  }
  if (gt_encseq_has_specialranges(encseq))
  {
    GtSpecialrangeiterator *sri;
    GtRange range;

    if (GT_ISDIRREVERSE(readmode))
    {
      sri = gt_specialrangeiterator_new(encseq,false);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.end <= lastend);
        PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                           twobitencoding,
                                           totallength,
                                           maxunitindex,
                                           realtotallength,
                                           mirrored,
                                           maskright,
                                           readmode,
                                           kmersize,
                                           upperkmersize,
                                           processkmercodeinfo,
                                           processkmerspecialinfo,
                                           range.end,
                                           lastend);
        lastend = range.start;
      }
    } else
    {
      sri = gt_specialrangeiterator_new(encseq,true);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.start >= laststart);
        /*printf("region of length %lu\n",range.start - laststart);*/
        PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                           twobitencoding,
                                           totallength,
                                           maxunitindex,
                                           realtotallength,
                                           mirrored,
                                           maskright,
                                           readmode,
                                           kmersize,
                                           upperkmersize,
                                           processkmercodeinfo,
                                           processkmerspecialinfo,
                                           laststart,
                                           range.start);
        laststart = range.end;
      }
    }
    gt_assert(totallength >= laststart);
    gt_specialrangeiterator_delete(sri);
  }
  PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(twobitencoding,
                                     totallength,
                                     maxunitindex,
                                     realtotallength,
                                     mirrored,
                                     maskright,
                                     readmode,
                                     kmersize,
                                     upperkmersize,
                                     processkmercodeinfo,
                                     processkmerspecialinfo,
                                     GT_ISDIRREVERSE(readmode) ? 0
                                                               : laststart,
                                     GT_ISDIRREVERSE(readmode) ? lastend
                                                               : totallength);
}
