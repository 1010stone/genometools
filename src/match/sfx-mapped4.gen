/*
  Copyright (c) 2007-2010 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2007-2010 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#ifndef SFX_MAPPED4_COMMON_GEN
#define SFX_MAPPED4_COMMON_GEN

GtCodetype gt_kmercode_at_position(const GtTwobitencoding *twobitencoding,
                                   unsigned long pos,
                                   unsigned int kmersize)
{
  unsigned int unitoffset = (unsigned int) GT_MODBYUNITSIN2BITENC(pos);
  unsigned long unitindex = GT_DIVBYUNITSIN2BITENC(pos);
  const GtCodetype maskright = (GtCodetype) (1 << GT_MULT2(kmersize))-1;

  if (unitoffset <= (unsigned int) GT_UNITSIN2BITENC - kmersize)
  {
    return (GtCodetype) (twobitencoding[unitindex]
            >> GT_MULT2(GT_UNITSIN2BITENC - kmersize - unitoffset))
           & maskright;
  } else
  {
    unsigned int shiftleft = GT_MULT2(unitoffset+kmersize-GT_UNITSIN2BITENC);
    return (GtCodetype)
           ((twobitencoding[unitindex] << shiftleft) |
            (twobitencoding[unitindex+1] >> (GT_MULT2(GT_UNITSIN2BITENC) -
                                             shiftleft)))
           & maskright;
  }
}

GtCodetype gt_kmercode_at_firstpos(const GtTwobitencoding *twobitencoding,
                                   unsigned int kmersize)
{
  const GtCodetype maskright = (GtCodetype) (1 << GT_MULT2(kmersize))-1;
  return (GtCodetype) (twobitencoding[0] >>
                       GT_MULT2(GT_UNITSIN2BITENC - kmersize)) & maskright;
}

#define GT_SWAPBITPAIRS(L1,L2,D) ((kmer & (3UL << L1)) >> D) |\
                                 ((kmer & (3UL << L2)) << D)

GtCodetype gt_kmercode_reverse(GtCodetype kmer,unsigned int kmersize)
{
  switch (kmersize)
  {
    case 2:
      return GT_SWAPBITPAIRS(2,0,2);
    case 3:
      return GT_SWAPBITPAIRS(4,0,4) |
             (kmer & (3U << 2));
    case 4:
      return GT_SWAPBITPAIRS(6,0,6) |
             GT_SWAPBITPAIRS(4,2,2);
    case 5:
      return GT_SWAPBITPAIRS(8,0,8) |
             GT_SWAPBITPAIRS(6,2,4) |
             (kmer & (3U << 4));
    case 6:
      return GT_SWAPBITPAIRS(10,0,10) |
             GT_SWAPBITPAIRS(8,2,6) |
             GT_SWAPBITPAIRS(6,4,2);
    case 7:
      return GT_SWAPBITPAIRS(12,0,12) |
             GT_SWAPBITPAIRS(10,2,8) |
             GT_SWAPBITPAIRS(8,4,4) |
             (kmer & (3U << 6));
    case 8:
      return GT_SWAPBITPAIRS(14,0,14) |
             GT_SWAPBITPAIRS(12,2,10) |
             GT_SWAPBITPAIRS(10,4,6) |
             GT_SWAPBITPAIRS(8,6,2);
    case 9:
      return GT_SWAPBITPAIRS(16,0,16) |
             GT_SWAPBITPAIRS(14,2,12) |
             GT_SWAPBITPAIRS(12,4,8) |
             GT_SWAPBITPAIRS(10,6,4) |
             (kmer & (3U << 8));
    case 10:
      return GT_SWAPBITPAIRS(18,0,18) |
             GT_SWAPBITPAIRS(16,2,14) |
             GT_SWAPBITPAIRS(14,4,10) |
             GT_SWAPBITPAIRS(12,6,6) |
             GT_SWAPBITPAIRS(10,8,2);
    case 11:
      return GT_SWAPBITPAIRS(20,0,20) |
             GT_SWAPBITPAIRS(18,2,16) |
             GT_SWAPBITPAIRS(16,4,12) |
             GT_SWAPBITPAIRS(14,6,8) |
             GT_SWAPBITPAIRS(12,8,4) |
             (kmer & (3U << 10));
    case 12:
      return GT_SWAPBITPAIRS(22,0,22) |
             GT_SWAPBITPAIRS(20,2,18) |
             GT_SWAPBITPAIRS(18,4,14) |
             GT_SWAPBITPAIRS(16,6,10) |
             GT_SWAPBITPAIRS(14,8,6) |
             GT_SWAPBITPAIRS(12,10,2);
    case 13:
      return GT_SWAPBITPAIRS(24,0,24) |
             GT_SWAPBITPAIRS(22,2,20) |
             GT_SWAPBITPAIRS(20,4,16) |
             GT_SWAPBITPAIRS(18,6,12) |
             GT_SWAPBITPAIRS(16,8,8) |
             GT_SWAPBITPAIRS(14,10,4) |
             (kmer & (3U << 12));
    case 14:
      return GT_SWAPBITPAIRS(26,0,26) |
             GT_SWAPBITPAIRS(24,2,22) |
             GT_SWAPBITPAIRS(22,4,18) |
             GT_SWAPBITPAIRS(20,6,14) |
             GT_SWAPBITPAIRS(18,8,10) |
             GT_SWAPBITPAIRS(16,10,6) |
             GT_SWAPBITPAIRS(14,12,2);
#ifdef _LP64
    case 15:
      return GT_SWAPBITPAIRS(28,0,28) |
             GT_SWAPBITPAIRS(26,2,24) |
             GT_SWAPBITPAIRS(24,4,20) |
             GT_SWAPBITPAIRS(22,6,16) |
             GT_SWAPBITPAIRS(20,8,12) |
             GT_SWAPBITPAIRS(18,10,8) |
             GT_SWAPBITPAIRS(16,12,4) |
             (kmer & (3U << 14));
    case 16:
      return GT_SWAPBITPAIRS(30,0,30) |
             GT_SWAPBITPAIRS(28,2,26) |
             GT_SWAPBITPAIRS(26,4,22) |
             GT_SWAPBITPAIRS(24,6,18) |
             GT_SWAPBITPAIRS(22,8,14) |
             GT_SWAPBITPAIRS(20,10,10) |
             GT_SWAPBITPAIRS(18,12,6) |
             GT_SWAPBITPAIRS(16,14,2);
    case 17:
      return GT_SWAPBITPAIRS(32,0,32) |
             GT_SWAPBITPAIRS(30,2,28) |
             GT_SWAPBITPAIRS(28,4,24) |
             GT_SWAPBITPAIRS(26,6,20) |
             GT_SWAPBITPAIRS(24,8,16) |
             GT_SWAPBITPAIRS(22,10,12) |
             GT_SWAPBITPAIRS(20,12,8) |
             GT_SWAPBITPAIRS(18,14,4) |
             (kmer & (3U << 16));
    case 18:
      return GT_SWAPBITPAIRS(34,0,34) |
             GT_SWAPBITPAIRS(32,2,30) |
             GT_SWAPBITPAIRS(30,4,26) |
             GT_SWAPBITPAIRS(28,6,22) |
             GT_SWAPBITPAIRS(26,8,18) |
             GT_SWAPBITPAIRS(24,10,14) |
             GT_SWAPBITPAIRS(22,12,10) |
             GT_SWAPBITPAIRS(20,14,6) |
             GT_SWAPBITPAIRS(18,16,2);
    case 19:
      return GT_SWAPBITPAIRS(36,0,36) |
             GT_SWAPBITPAIRS(34,2,32) |
             GT_SWAPBITPAIRS(32,4,28) |
             GT_SWAPBITPAIRS(30,6,24) |
             GT_SWAPBITPAIRS(28,8,20) |
             GT_SWAPBITPAIRS(26,10,16) |
             GT_SWAPBITPAIRS(24,12,12) |
             GT_SWAPBITPAIRS(22,14,8) |
             GT_SWAPBITPAIRS(20,16,4) |
             (kmer & (3U << 18));
    case 20:
      return GT_SWAPBITPAIRS(38,0,38) |
             GT_SWAPBITPAIRS(36,2,34) |
             GT_SWAPBITPAIRS(34,4,30) |
             GT_SWAPBITPAIRS(32,6,26) |
             GT_SWAPBITPAIRS(30,8,22) |
             GT_SWAPBITPAIRS(28,10,18) |
             GT_SWAPBITPAIRS(26,12,14) |
             GT_SWAPBITPAIRS(24,14,10) |
             GT_SWAPBITPAIRS(22,16,6) |
             GT_SWAPBITPAIRS(20,18,2);
#endif
    default: fprintf(stderr,"illegal kmersize=%u\n",kmersize);
             exit(GT_EXIT_PROGRAMMING_ERROR);
  }
}

GtCodetype gt_kmercode_complement(GtCodetype kmer,GtCodetype maskright)
{
  return kmer ^ maskright;
}

#ifdef SKDEBUG
static void checkallreversebitpairs(void)
{
  unsigned int kmersize, code, coderev, coderevrev, maxcode;

  for (kmersize = 2U; kmersize <= 14U; kmersize++)
  {
    maxcode = (1U << 2 * kmersize)-1;
    printf("kmsize=%u,maxcode=%u\n",kmersize,maxcode);
    for (code = 0; code <= maxcode; code++)
    {
      coderev = gt_kmercode_reverse(code,kmersize);
      coderevrev = gt_kmercode_reverse(coderev,kmersize);
      gt_assert(coderevrev != code);
    }
  }
}
#endif

#define UPDATEKMER(KMER,CC)\
        KMER <<= 2;\
        KMER |= CC;\
        KMER &= maskright

#define ADJUSTREVERSEPOS(POS) (rightbound - (POS))

static GtCodetype getencseqkmers_nospecialtwobitencoding(
                                    const GtTwobitencoding *twobitencoding,
                                    unsigned long totallength,
                                    GtCodetype maskright,
                                    GtReadmode readmode,
                                    unsigned int kmersize,
                                    void(*processkmercode)(void *,
                                                           unsigned long,
                                                           GtCodetype),
                                    void *processkmercodeinfo,
                                    unsigned long startpos,
                                    unsigned long endpos)
{
  unsigned long pos, unitindex;
  unsigned int shiftright;
  GtCodetype code;
  GtUchar cc;
  GtTwobitencoding currentencoding;
  unsigned long rightbound = totallength - kmersize;

  gt_assert(kmersize > 1U);
  if (GT_ISDIRREVERSE(readmode))
  {
    gt_assert(endpos >= (unsigned long) kmersize);
    pos = endpos - (unsigned long) kmersize;
    unitindex = (pos > 0) ? GT_DIVBYUNITSIN2BITENC(pos-1) : 0;
    code = gt_kmercode_reverse(gt_kmercode_at_position(twobitencoding,pos,
                                                       kmersize),
                               kmersize);
    processkmercode(processkmercodeinfo,
                    ADJUSTREVERSEPOS(pos),
                    GT_ISDIRCOMPLEMENT(readmode)
                      ? gt_kmercode_complement(code,maskright)
                      : code);
  } else
  {
    pos = startpos;
    unitindex = GT_DIVBYUNITSIN2BITENC(startpos+kmersize);
    code = gt_kmercode_at_position(twobitencoding,pos,kmersize);
    processkmercode(processkmercodeinfo,pos,
                    GT_ISDIRCOMPLEMENT(readmode)
                      ? gt_kmercode_complement(code,maskright)
                      : code);
  }
  currentencoding = twobitencoding[unitindex];
  if (GT_ISDIRREVERSE(readmode))
  {
    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(pos-1));
    while (pos > startpos)
    {
      pos--;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      UPDATEKMER(code,cc);
      processkmercode(processkmercodeinfo,ADJUSTREVERSEPOS(pos),
                       (readmode == GT_READMODE_REVCOMPL)
                          ? gt_kmercode_complement(code,maskright)
                          : code);
      if (shiftright < (unsigned int) (GT_INTWORDSIZE-2))
      {
        shiftright += 2;
      } else
      {
        gt_assert(unitindex > 0 || pos == startpos);
        if (unitindex > 0)
        {
          currentencoding = twobitencoding[--unitindex];
        }
        shiftright = 0;
      }
    }
  } else
  {
    unsigned long maxunitindex = gt_unitsoftwobitencoding(totallength) - 1;

    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(startpos+kmersize));
    while (pos < endpos - (unsigned long) kmersize)
    {
      pos++;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      UPDATEKMER(code,cc);
      processkmercode(processkmercodeinfo,pos,
                       (readmode == GT_READMODE_COMPL)
                         ? gt_kmercode_complement(code,maskright)
                         : code);
      if (shiftright > 0)
      {
        shiftright -= 2;
      } else
      {
        gt_assert(unitindex < maxunitindex-1 ||
                  pos == endpos - (unsigned long) kmersize);
        if (unitindex < maxunitindex-1)
        {
          currentencoding = twobitencoding[++unitindex];
        }
        shiftright = (unsigned int) (GT_INTWORDSIZE-2);
      }
    }
  }
  return code;
}

static void getencseqkmers_rangetwobitencoding(
                                      const GtTwobitencoding *twobitencoding,
                                      unsigned long totallength,
                                      unsigned long realtotallength,
                                      bool mirrored,
                                      GtCodetype maskright,
                                      GtReadmode readmode,
                                      unsigned int kmersize,
                                      void(*processkmercode)(void *,
                                                             unsigned long,
                                                             GtCodetype),
                                      void *processkmercodeinfo,
                                      void(*processkmerspecial)(void *,
                                                                unsigned int,
                                                                unsigned int,
                                                                unsigned long),
                                      void *processkmerspecialinfo,
                                      unsigned long startpos,
                                      unsigned long endpos)
{
  GtCodetype lastcode, newcode;

  if (mirrored && startpos >= realtotallength) {
    gt_readmode_invert(readmode);
    startpos = GT_REVERSEPOS(realtotallength, startpos - realtotallength - 2);
    if (endpos == totallength)
      endpos = 0;
    else
      endpos = GT_REVERSEPOS(realtotallength, endpos - realtotallength - 2);
    if (startpos > endpos) {
      unsigned long tmp = startpos;
      startpos = endpos;
      endpos = tmp;
    }
    gt_assert(startpos <= endpos);
    gt_assert(endpos <= realtotallength);
  }
  if (endpos - startpos >= (unsigned long) kmersize)
  {
    gt_assert(endpos > 0);
    lastcode = getencseqkmers_nospecialtwobitencoding(twobitencoding,
                                                      totallength,
                                                      maskright,
                                                      readmode,
                                                      kmersize,
                                                      processkmercode,
                                                      processkmercodeinfo,
                                                      startpos,
                                                      endpos);
    if (GT_ISDIRCOMPLEMENT(readmode))
    {
      lastcode = gt_kmercode_complement(lastcode,maskright);
    }
    newcode = ((lastcode << 2) | 3UL) & maskright;
    if (processkmerspecial != NULL)
    {
      processkmerspecial(processkmerspecialinfo,
                         kmersize-1,
                         (unsigned int) newcode,
                         GT_ISDIRREVERSE(readmode) ? (totallength - startpos)
                                                   : endpos);
    }
  } else
  {
    if (startpos < endpos)
    {
      unsigned int fillpos;

      gt_assert((unsigned long) kmersize > endpos - startpos);
      fillpos = (unsigned int) (kmersize - (endpos - startpos));
      lastcode = gt_kmercode_at_position(twobitencoding,startpos,
                                         (unsigned int) (endpos - startpos));
      if (GT_ISDIRREVERSE(readmode) && (unsigned int) (endpos - startpos) > 1U)
      {
        lastcode = gt_kmercode_reverse(lastcode,
                                       (unsigned int) (endpos-startpos));
      }
      if (GT_ISDIRCOMPLEMENT(readmode))
      {
        lastcode = gt_kmercode_complement(lastcode,maskright);
      }
      newcode
        = ((lastcode << GT_MULT2(fillpos)) | ((1UL << GT_MULT2(fillpos)) - 1))
           & maskright;
      if (processkmerspecial != NULL)
      {
        processkmerspecial(processkmerspecialinfo,
                           (unsigned int) (endpos - startpos),
                           (unsigned int) newcode,
                           GT_ISDIRREVERSE(readmode) ? (totallength - startpos)
                                                     : endpos);
      }
    }
  }
}

void getencseqkmers_twobitencoding(const GtEncseq *encseq,
                                   GtReadmode readmode,
                                   unsigned int kmersize,
                                   void(*processkmercode)(void *,
                                                          unsigned long,
                                                          GtCodetype),
                                   void *processkmercodeinfo,
                                   void(*processkmerspecial)(void *,
                                                             unsigned int,
                                                             unsigned int,
                                                             unsigned long),
                                   void *processkmerspecialinfo)
{
  unsigned long laststart = 0, lastend,
                totallength,
                realtotallength;
  const GtTwobitencoding *twobitencoding
    = gt_encseq_twobitencoding_export(encseq);
  const GtCodetype maskright = (GtCodetype) (1 << GT_MULT2(kmersize))-1;
  bool mirrored = gt_encseq_is_mirrored(encseq);

  lastend = totallength = realtotallength = gt_encseq_total_length(encseq);
  if (mirrored) {
    gt_assert((totallength & 1) == 1UL);
    realtotallength = ((realtotallength - 1) / 2);
  }
  if (gt_encseq_has_specialranges(encseq))
  {
    GtSpecialrangeiterator *sri;
    GtRange range;

    if (GT_ISDIRREVERSE(readmode))
    {
      sri = gt_specialrangeiterator_new(encseq,false);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.end <= lastend);
        getencseqkmers_rangetwobitencoding(twobitencoding,
                                           totallength,
                                           realtotallength,
                                           mirrored,
                                           maskright,
                                           readmode,
                                           kmersize,
                                           processkmercode,
                                           processkmercodeinfo,
                                           processkmerspecial,
                                           processkmerspecialinfo,
                                           range.end,
                                           lastend);
        lastend = range.start;
      }
    } else
    {
      sri = gt_specialrangeiterator_new(encseq,true);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.start >= laststart);
        getencseqkmers_rangetwobitencoding(twobitencoding,
                                           totallength,
                                           realtotallength,
                                           mirrored,
                                           maskright,
                                           readmode,
                                           kmersize,
                                           processkmercode,
                                           processkmercodeinfo,
                                           processkmerspecial,
                                           processkmerspecialinfo,
                                           laststart,
                                           range.start);
        laststart = range.end;
      }
    }
    gt_assert(totallength >= laststart);
    gt_specialrangeiterator_delete(sri);
  }
  getencseqkmers_rangetwobitencoding(twobitencoding,
                                     totallength,
                                     realtotallength,
                                     mirrored,
                                     maskright,
                                     readmode,
                                     kmersize,
                                     processkmercode,
                                     processkmercodeinfo,
                                     processkmerspecial,
                                     processkmerspecialinfo,
                                     GT_ISDIRREVERSE(readmode) ? 0
                                                               : laststart,
                                     GT_ISDIRREVERSE(readmode) ? lastend
                                                               : totallength);
}
#endif

static GtCodetype PROCESSKMERPREFIX(getencseqkmers_nospecialtwobitencoding)(
                                    const GtTwobitencoding *twobitencoding,
                                    unsigned long totallength,
                                    GtCodetype maskright,
                                    GtReadmode readmode,
                                    unsigned int kmersize,
                                    PROCESSKMERTYPE *processkmercodeinfo,
                                    unsigned long startpos,
                                    unsigned long endpos)
{
  unsigned long pos, unitindex;
  unsigned int shiftright;
  GtCodetype code;
  GtUchar cc;
  GtTwobitencoding currentencoding;
  unsigned long rightbound = totallength - kmersize;

  gt_assert(kmersize > 1U);
  if (GT_ISDIRREVERSE(readmode))
  {
    gt_assert(endpos >= (unsigned long) kmersize);
    pos = endpos - (unsigned long) kmersize;
    unitindex = (pos > 0) ? GT_DIVBYUNITSIN2BITENC(pos-1) : 0;
    code = gt_kmercode_reverse(gt_kmercode_at_position(twobitencoding,pos,
                                                       kmersize),
                               kmersize);
    PROCESSKMERCODE(processkmercodeinfo,
                    ADJUSTREVERSEPOS(pos),
                    GT_ISDIRCOMPLEMENT(readmode)
                      ? gt_kmercode_complement(code,maskright)
                      : code);
  } else
  {
    pos = startpos;
    unitindex = GT_DIVBYUNITSIN2BITENC(startpos+kmersize);
    code = gt_kmercode_at_position(twobitencoding,pos,kmersize);
    PROCESSKMERCODE(processkmercodeinfo,pos,
                    GT_ISDIRCOMPLEMENT(readmode)
                      ? gt_kmercode_complement(code,maskright)
                      : code);
  }
  currentencoding = twobitencoding[unitindex];
  if (GT_ISDIRREVERSE(readmode))
  {
    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(pos-1));
    while (pos > startpos)
    {
      pos--;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      UPDATEKMER(code,cc);
      PROCESSKMERCODE(processkmercodeinfo,ADJUSTREVERSEPOS(pos),
                       (readmode == GT_READMODE_REVCOMPL)
                          ? gt_kmercode_complement(code,maskright)
                          : code);
      if (shiftright < (unsigned int) (GT_INTWORDSIZE-2))
      {
        shiftright += 2;
      } else
      {
        gt_assert(unitindex > 0 || pos == startpos);
        if (unitindex > 0)
        {
          currentencoding = twobitencoding[--unitindex];
        }
        shiftright = 0;
      }
    }
  } else
  {
    unsigned long maxunitindex = gt_unitsoftwobitencoding(totallength) - 1;

    shiftright = (unsigned int)
                 GT_MULT2(GT_UNITSIN2BITENC - 1 -
                          GT_MODBYUNITSIN2BITENC(startpos+kmersize));
    while (pos < endpos - (unsigned long) kmersize)
    {
      pos++;
      cc = (GtUchar) (currentencoding >> shiftright) & 3;
      UPDATEKMER(code,cc);
      PROCESSKMERCODE(processkmercodeinfo,pos,
                       (readmode == GT_READMODE_COMPL)
                         ? gt_kmercode_complement(code,maskright)
                         : code);
      if (shiftright > 0)
      {
        shiftright -= 2;
      } else
      {
        gt_assert(unitindex < maxunitindex-1 ||
                  pos == endpos - (unsigned long) kmersize);
        if (unitindex < maxunitindex-1)
        {
          currentencoding = twobitencoding[++unitindex];
        }
        shiftright = (unsigned int) (GT_INTWORDSIZE-2);
      }
    }
  }
  return code;
}

static void PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                             const GtTwobitencoding *twobitencoding,
                             unsigned long totallength,
                             unsigned long realtotallength,
                             bool mirrored,
                             GtCodetype maskright,
                             GtReadmode readmode,
                             unsigned int kmersize,
                             PROCESSKMERTYPE *processkmercodeinfo,
                             PROCESSKMERSPECIALTYPE *processkmerspecialinfo,
                             unsigned long startpos,
                             unsigned long endpos)
{
  GtCodetype lastcode, newcode;

  if (mirrored && startpos >= realtotallength) {
    gt_readmode_invert(readmode);
    startpos = GT_REVERSEPOS(realtotallength, startpos - realtotallength - 2);
    if (endpos == totallength)
      endpos = 0;
    else
      endpos = GT_REVERSEPOS(realtotallength, endpos - realtotallength - 2);
    if (startpos > endpos) {
      unsigned long tmp = startpos;
      startpos = endpos;
      endpos = tmp;
    }
    gt_assert(startpos <= endpos);
    gt_assert(endpos <= realtotallength);
  }
  if (endpos - startpos >= (unsigned long) kmersize)
  {
    gt_assert(endpos > 0);
    lastcode = PROCESSKMERPREFIX(getencseqkmers_nospecialtwobitencoding)(
                                                      twobitencoding,
                                                      totallength,
                                                      maskright,
                                                      readmode,
                                                      kmersize,
                                                      processkmercodeinfo,
                                                      startpos,
                                                      endpos);
    if (GT_ISDIRCOMPLEMENT(readmode))
    {
      lastcode = gt_kmercode_complement(lastcode,maskright);
    }
    newcode = ((lastcode << 2) | 3UL) & maskright;
    PROCESSKMERCODESPECIAL(processkmerspecialinfo,
                           kmersize-1,
                           (unsigned int) newcode,
                           GT_ISDIRREVERSE(readmode) ? (totallength - startpos)
                                                     : endpos);
  } else
  {
    if (startpos < endpos)
    {
      unsigned int fillpos;

      gt_assert((unsigned long) kmersize > endpos - startpos);
      fillpos = (unsigned int) (kmersize - (endpos - startpos));
      lastcode = gt_kmercode_at_position(twobitencoding,startpos,
                                         (unsigned int) (endpos - startpos));
      if (GT_ISDIRREVERSE(readmode) && (unsigned int) (endpos - startpos) > 1U)
      {
        lastcode = gt_kmercode_reverse(lastcode,
                                       (unsigned int) (endpos-startpos));
      }
      if (GT_ISDIRCOMPLEMENT(readmode))
      {
        lastcode = gt_kmercode_complement(lastcode,maskright);
      }
      newcode
        = ((lastcode << GT_MULT2(fillpos)) | ((1UL << GT_MULT2(fillpos)) - 1))
           & maskright;
      PROCESSKMERCODESPECIAL(processkmerspecialinfo,
                             (unsigned int) (endpos - startpos),
                             (unsigned int) newcode,
                             GT_ISDIRREVERSE(readmode)
                               ? (totallength - startpos)
                               : endpos);
    }
  }
}

void PROCESSKMERPREFIX(getencseqkmers_twobitencoding)(
                               const GtEncseq *encseq,
                               GtReadmode readmode,
                               unsigned int kmersize,
                               PROCESSKMERTYPE *processkmercodeinfo,
                               PROCESSKMERSPECIALTYPE *processkmerspecialinfo)
{
  unsigned long laststart = 0, lastend,
                totallength,
                realtotallength;
  const GtTwobitencoding *twobitencoding
    = gt_encseq_twobitencoding_export(encseq);
  const GtCodetype maskright = (GtCodetype) (1 << GT_MULT2(kmersize))-1;
  bool mirrored = gt_encseq_is_mirrored(encseq);

  lastend = totallength = realtotallength = gt_encseq_total_length(encseq);
  if (mirrored) {
    gt_assert((totallength & 1) == 1UL);
    realtotallength = ((realtotallength - 1) / 2);
  }
  if (gt_encseq_has_specialranges(encseq))
  {
    GtSpecialrangeiterator *sri;
    GtRange range;

    if (GT_ISDIRREVERSE(readmode))
    {
      sri = gt_specialrangeiterator_new(encseq,false);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.end <= lastend);
        PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                           twobitencoding,
                                           totallength,
                                           realtotallength,
                                           mirrored,
                                           maskright,
                                           readmode,
                                           kmersize,
                                           processkmercodeinfo,
                                           processkmerspecialinfo,
                                           range.end,
                                           lastend);
        lastend = range.start;
      }
    } else
    {
      sri = gt_specialrangeiterator_new(encseq,true);
      while (gt_specialrangeiterator_next(sri,&range))
      {
        gt_assert(range.start >= laststart);
        PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(
                                           twobitencoding,
                                           totallength,
                                           realtotallength,
                                           mirrored,
                                           maskright,
                                           readmode,
                                           kmersize,
                                           processkmercodeinfo,
                                           processkmerspecialinfo,
                                           laststart,
                                           range.start);
        laststart = range.end;
      }
    }
    gt_assert(totallength >= laststart);
    gt_specialrangeiterator_delete(sri);
  }
  PROCESSKMERPREFIX(getencseqkmers_rangetwobitencoding)(twobitencoding,
                                     totallength,
                                     realtotallength,
                                     mirrored,
                                     maskright,
                                     readmode,
                                     kmersize,
                                     processkmercodeinfo,
                                     processkmerspecialinfo,
                                     GT_ISDIRREVERSE(readmode) ? 0
                                                               : laststart,
                                     GT_ISDIRREVERSE(readmode) ? lastend
                                                               : totallength);
}
