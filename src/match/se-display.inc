/* This file was generated by ./scripts/gen-display-struct.rb, do NOT edit. */
static GtSEdisplayStruct gt_display_arguments_table[] =
{
  {"alignment", Gt_Alignment_display, false},
  {"alignment.length", Gt_Alignment_length_display, true},
  {"bitscore", Gt_Bitscore_display, true},
  {"blast", Gt_Blast_display, false},
  {"cigar", Gt_Cigar_display, true},
  {"cigarX", Gt_Cigarx_display, true},
  {"editdist", Gt_Editdist_display, true},
  {"evalue", Gt_Evalue_display, true},
  {"failed_seed", Gt_Failed_seed_display, false},
  {"fstperquery", Gt_Fstperquery_display, false},
  {"identity", Gt_Identity_display, true},
  {"indels", Gt_Indels_display, true},
  {"mismatches", Gt_Mismatches_display, true},
  {"polinfo", Gt_Polinfo_display, false},
  {"q.desc", Gt_Q_desc_display, true},
  {"q.end", Gt_Q_end_display, true},
  {"q.len", Gt_Q_len_display, true},
  {"q.seqlen", Gt_Q_seqlen_display, true},
  {"q.seqnum", Gt_Q_seqnum_display, true},
  {"q.start", Gt_Q_start_display, true},
  {"s.desc", Gt_S_desc_display, true},
  {"s.end", Gt_S_end_display, true},
  {"s.len", Gt_S_len_display, true},
  {"s.seqlen", Gt_S_seqlen_display, true},
  {"s.seqnum", Gt_S_seqnum_display, true},
  {"s.start", Gt_S_start_display, true},
  {"score", Gt_Score_display, true},
  {"seed.len", Gt_Seed_len_display, true},
  {"seed.q.start", Gt_Seed_q_start_display, true},
  {"seed.s.start", Gt_Seed_s_start_display, true},
  {"seed_in_algn", Gt_Seed_in_algn_display, false},
  {"strand", Gt_Strand_display, true}
};

static unsigned int gt_display_flag2index[] = {
   0,
   30,
   13,
   8,
   9,
   3,
   4,
   5,
   22,
   24,
   20,
   25,
   21,
   31,
   16,
   18,
   14,
   19,
   15,
   1,
   12,
   11,
   26,
   6,
   10,
   27,
   29,
   28,
   23,
   17,
   7,
   2
};

const char *gt_querymatch_display_help(void)
{
  return "specify what information about the matches to display\n"
         "alignment:        show alignment (possibly followed by \n"
         "                  =<number> to specify width of alignment \n"
         "                  columns)\n"
         "seed_in_algn:     mark the seed in alignment\n"
         "polinfo:          add polishing information for shown \n"
         "                  alignment\n"
         "failed_seed:      show the coordinates of a seed extension, \n"
         "                  which does not satisfy the filter conditions\n"
         "fstperquery:      output only the first found match per query\n"
         "blast:            output matches in blast format 7 (tabular with \n"
         "                  comment lines, instead of gap opens indels are \n"
         "                  displayed)\n"
         "cigar:            display cigar string representing alignment \n"
         "                  (no distinction between match and mismatch)\n"
         "cigarX:           display cigar string representing alignment \n"
         "                  (distinction between match (=) and mismatch \n"
         "                  (X))\n"
         "s.len:            display length of match on subject sequence\n"
         "s.seqnum:         display sequence number of subject sequence\n"
         "s.desc:           display sequence description of subject \n"
         "                  sequence\n"
         "s.start:          display start position of match on subject \n"
         "                  sequence\n"
         "s.end:            display end position of match on subject \n"
         "                  sequence\n"
         "strand:           display strand of match using symbols F \n"
         "                  (forward) and P (reverse complement)\n"
         "q.len:            display length of match on query sequence\n"
         "q.seqnum:         display sequence number of query sequence\n"
         "q.desc:           display sequence description of query \n"
         "                  sequence\n"
         "q.start:          display start position of match on query \n"
         "                  sequence\n"
         "q.end:            display end position of match on query \n"
         "                  sequence\n"
         "alignment.length: display length of alignment\n"
         "mismatches:       display number of mismatches in alignment\n"
         "indels:           display number of indels in alignment\n"
         "score:            display score of match\n"
         "editdist:         display unit edit distance\n"
         "identity:         display percent identity of match\n"
         "seed.len:         display length seed of the match\n"
         "seed.s.start:     display start position of seed in subject\n"
         "seed.q.start:     display start position of seed in query\n"
         "s.seqlen:         display length of subject sequence in which \n"
         "                  match occurs\n"
         "q.seqlen:         display length of query sequence in which \n"
         "                  match occurs\n"
         "evalue:           display evalue\n"
         "bitscore:         display bit score\n"
;
}
#define GT_SE_POSSIBLE_DISPLAY_ARGS "alignment"\
        ", seed_in_algn"\
        ", polinfo"\
        ", failed_seed"\
        ", fstperquery"\
        ", blast"\
        ", cigar"\
        ", cigarX"\
        ", s.len"\
        ", s.seqnum"\
        ", s.desc"\
        ", s.start"\
        ", s.end"\
        ", strand"\
        ", q.len"\
        ", q.seqnum"\
        ", q.desc"\
        ", q.start"\
        ", q.end"\
        ", alignment.length"\
        ", mismatches"\
        ", indels"\
        ", score"\
        ", editdist"\
        ", identity"\
        ", seed.len"\
        ", seed.s.start"\
        ", seed.q.start"\
        ", s.seqlen"\
        ", q.seqlen"\
        ", evalue"\
        ", bitscore"

bool gt_querymatch_seed_in_algn_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_in_algn_display);
}

bool gt_querymatch_polinfo_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Polinfo_display);
}

bool gt_querymatch_failed_seed_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Failed_seed_display);
}

bool gt_querymatch_fstperquery_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Fstperquery_display);
}

bool gt_querymatch_blast_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Blast_display);
}

bool gt_querymatch_cigar_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Cigar_display);
}

bool gt_querymatch_cigarX_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Cigarx_display);
}

bool gt_querymatch_s_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_len_display);
}

bool gt_querymatch_s_seqnum_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_seqnum_display);
}

bool gt_querymatch_s_desc_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_desc_display);
}

bool gt_querymatch_s_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_start_display);
}

bool gt_querymatch_s_end_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_end_display);
}

bool gt_querymatch_strand_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Strand_display);
}

bool gt_querymatch_q_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_len_display);
}

bool gt_querymatch_q_seqnum_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_seqnum_display);
}

bool gt_querymatch_q_desc_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_desc_display);
}

bool gt_querymatch_q_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_start_display);
}

bool gt_querymatch_q_end_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_end_display);
}

bool gt_querymatch_alignment_length_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Alignment_length_display);
}

bool gt_querymatch_mismatches_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Mismatches_display);
}

bool gt_querymatch_indels_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Indels_display);
}

bool gt_querymatch_score_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Score_display);
}

bool gt_querymatch_editdist_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Editdist_display);
}

bool gt_querymatch_identity_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Identity_display);
}

bool gt_querymatch_seed_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_len_display);
}

bool gt_querymatch_seed_s_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_s_start_display);
}

bool gt_querymatch_seed_q_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_q_start_display);
}

bool gt_querymatch_s_seqlen_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_seqlen_display);
}

bool gt_querymatch_q_seqlen_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_seqlen_display);
}

bool gt_querymatch_evalue_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Evalue_display);
}

bool gt_querymatch_bitscore_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Bitscore_display);
}
