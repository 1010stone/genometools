/* This file was generated by ./scripts/gen-display-struct.rb, do NOT edit. */
static GtSEdisplayStruct gt_display_arguments_table[] =
{
  {"alignment", Gt_Alignment_display, false},
  {"bitscore", Gt_Bitscore_display, true},
  {"cigar", Gt_Cigar_display, true},
  {"editdist", Gt_Editdist_display, true},
  {"evalue", Gt_Evalue_display, true},
  {"failed_seed", Gt_Failed_seed_display, false},
  {"fstperquery", Gt_Fstperquery_display, false},
  {"identity", Gt_Identity_display, true},
  {"polinfo", Gt_Polinfo_display, false},
  {"q.desc", Gt_Q_desc_display, true},
  {"q.len", Gt_Q_len_display, true},
  {"q.seqlen", Gt_Q_seqlen_display, true},
  {"q.seqnum", Gt_Q_seqnum_display, true},
  {"q.start", Gt_Q_start_display, true},
  {"s.desc", Gt_S_desc_display, true},
  {"s.len", Gt_S_len_display, true},
  {"s.seqlen", Gt_S_seqlen_display, true},
  {"s.seqnum", Gt_S_seqnum_display, true},
  {"s.start", Gt_S_start_display, true},
  {"score", Gt_Score_display, true},
  {"seed.len", Gt_Seed_len_display, true},
  {"seed.q.start", Gt_Seed_q_start_display, true},
  {"seed.s.start", Gt_Seed_s_start_display, true},
  {"seed_in_algn", Gt_Seed_in_algn_display, false},
  {"strand", Gt_Strand_display, true}
};

static unsigned int gt_display_flag2index[] = {
   0,
   23,
   8,
   5,
   6,
   2,
   15,
   17,
   14,
   18,
   24,
   10,
   12,
   9,
   13,
   19,
   3,
   7,
   20,
   22,
   21,
   16,
   11,
   4,
   1
};

const char *gt_querymatch_display_help(void)
{
  return "specify what information about the matches to display\n"
         "alignment:    show alignment (possibly followed by =<number> to \n"
         "              specify width of alignment columns)\n"
         "seed_in_algn: mark the seed in alignment\n"
         "polinfo:      add polishing information for shown alignment\n"
         "failed_seed:  show the coordinates of a seed extension, which \n"
         "              does not satisfy the filter conditions\n"
         "fstperquery:  output only the first found match per query\n"
         "cigar:        display cigar string representing alignment\n"
         "s.len:        display length of match on subject sequence\n"
         "s.seqnum:     display sequence number of subject sequence\n"
         "s.desc:       display sequence description of subject sequence\n"
         "s.start:      display start position of match on subject \n"
         "              sequence\n"
         "strand:       display strand of match\n"
         "q.len:        display length of match on query sequence\n"
         "q.seqnum:     display sequence number of query sequence\n"
         "q.desc:       display sequence description of query sequence\n"
         "q.start:      display start position of match on query sequence\n"
         "score:        display score of match\n"
         "editdist:     display unit edit distance\n"
         "identity:     display percent identity of match\n"
         "seed.len:     display length seed of the match\n"
         "seed.s.start: display start position of seed in subject\n"
         "seed.q.start: display start position of seed in query\n"
         "s.seqlen:     display length of subject sequence in which match \n"
         "              occurs\n"
         "q.seqlen:     display length of query sequence in which match \n"
         "              occurs\n"
         "evalue:       display evalue\n"
         "bitscore:     display bit score\n"
;
}
#define GT_SE_POSSIBLE_DISPLAY_ARGS "alignment"\
        ", seed_in_algn"\
        ", polinfo"\
        ", failed_seed"\
        ", fstperquery"\
        ", cigar"\
        ", s.len"\
        ", s.seqnum"\
        ", s.desc"\
        ", s.start"\
        ", strand"\
        ", q.len"\
        ", q.seqnum"\
        ", q.desc"\
        ", q.start"\
        ", score"\
        ", editdist"\
        ", identity"\
        ", seed.len"\
        ", seed.s.start"\
        ", seed.q.start"\
        ", s.seqlen"\
        ", q.seqlen"\
        ", evalue"\
        ", bitscore"

bool gt_querymatch_seed_in_algn_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_in_algn_display);
}

bool gt_querymatch_polinfo_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Polinfo_display);
}

bool gt_querymatch_failed_seed_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Failed_seed_display);
}

bool gt_querymatch_fstperquery_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Fstperquery_display);
}

bool gt_querymatch_cigar_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Cigar_display);
}

bool gt_querymatch_s_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_len_display);
}

bool gt_querymatch_s_seqnum_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_seqnum_display);
}

bool gt_querymatch_s_desc_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_desc_display);
}

bool gt_querymatch_s_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_start_display);
}

bool gt_querymatch_strand_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Strand_display);
}

bool gt_querymatch_q_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_len_display);
}

bool gt_querymatch_q_seqnum_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_seqnum_display);
}

bool gt_querymatch_q_desc_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_desc_display);
}

bool gt_querymatch_q_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_start_display);
}

bool gt_querymatch_score_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Score_display);
}

bool gt_querymatch_editdist_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Editdist_display);
}

bool gt_querymatch_identity_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Identity_display);
}

bool gt_querymatch_seed_len_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_len_display);
}

bool gt_querymatch_seed_s_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_s_start_display);
}

bool gt_querymatch_seed_q_start_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Seed_q_start_display);
}

bool gt_querymatch_s_seqlen_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_S_seqlen_display);
}

bool gt_querymatch_q_seqlen_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Q_seqlen_display);
}

bool gt_querymatch_evalue_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Evalue_display);
}

bool gt_querymatch_bitscore_display(const GtSeedExtendDisplayFlag
                                        *display_flag)
{
  return gt_querymatch_display_on(display_flag,Gt_Bitscore_display);
}
