#!/usr/bin/env lua
--[[
  Copyright (c) 2006-2007 Gordon Gremme <gremme@zbh.uni-hamburg.de>
  Copyright (c) 2006-2007 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
]]

function usage()
  io.stderr:write(string.format("Usage: %s file [...]\n", arg[0]))
  io.stderr:write("Check C for accordance with coding standards.\n")
  os.exit(1)
end

if #arg == 0 then usage() end

error_code = 0

function err(filename, line_number, msg)
  io.stderr:write(string.format("%s: %d: %s\n", filename, line_number, msg))
  error_code = 1
end

for i, fn in ipairs(arg) do -- iterate over all files
  -- reset per file variables
  local empty_line_found = false
  local ln = 1 -- the line number

  for l in io.lines(fn) do -- iterate over all lines
    -- check for unnecessary blanks
    if string.find(l, " $") then
      err(fn, ln, "unnecessary blank(s) at the end of line")
    end

    -- check for missing blanks
    if string.find(l, " if%(")     then err(fn, ln, "missing blanks") end
    if string.find(l, " sizeof%(") then err(fn, ln, "missing blanks") end
    if string.find(l, " switch%(") then err(fn, ln, "missing blanks") end
    if string.find(l, " while%(")  then err(fn, ln, "missing blanks") end
    if string.find(l, " for%(")    then err(fn, ln, "missing blanks") end
    if string.find(l, " do%(")     then err(fn, ln, "missing blanks") end
    if string.find(l, "%){")       then err(fn, ln, "missing blanks") end

    -- check line length
    if #l > 80 then err(fn, ln, "line longer than 80 characters") end

    -- check for C++ style comments
    if string.find(l, "[^:/\"a-z]//") then err(fn, ln, "C++ style comment") end

    -- check for commata at the beginning of a line
    if string.find(l, "^ *,") then
      err(fn, ln, "illegal ',' at beginning of line")
    end

    -- check for old has_err usage
    if string.find(l, " has_err") then
      err(fn, ln, "illegal variable name 'has_err', use 'had_err' instead")
    end

    -- check for gt library includes with <
    if string.find(l, "^#include <libgt") then
      err(fn, ln, "wrong library include (<...>), use \"...\" instead")
    end

    -- check for tool includes with <
    if string.find(l, "^#include <tools/") then
      err(fn, ln, "wrong tool include (<...>), use \"...\" instead")
    end

    -- check for two empty lines in a row
    if string.find(l, "^$") then
      if (empty_line_found) then
        err(fn, ln, "two empty lines in a row")
      end
      empty_line_found = true
    else
      empty_line_found = false
    end
    -- increate line number
    ln = ln + 1
  end
end

os.exit(error_code)
